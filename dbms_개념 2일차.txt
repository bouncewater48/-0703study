day20_개념 (dbms 2일차)
복습 -> sql문 주요 특징 -> SELECT -> 자료형 -> 연산자 -> SQL 쿼리문의 종류 -> DDL -> 무결성

0. 복습
1) 오라클 설치
	9, 11, 17, 21
	홀수 버전으로 사용하는것이 안전한 버전이다
	i : internet을 의미 -> 9i 2001년 출시
	g : 그리드 컴퓨팅(grid computing) -> 11g 2007.09 출시
	c : 클라우드(cloud)

	> i : 인터넷 플랫폼 기반
	> g : grid 그리드 컴퓨팅 기반
	> c : cloud 클라우드 컴퓨팅 기반
	> SE : Standard Edition; 소규모 기업에서 사용
	> EE : Enterprise Edition; 대규모 기업에서 사용
	> XE : eXpress Edition 학습용


- 오라클 11g 설치 (오라클 계정 가입 후 다운로드)
	https://www.oracle.com/database/technologies/xe-prior-release-downloads.html
	운영체제에 맞는 걸로 다운로드 > 오라클 로그인(회원가입) > zip 파일 압축 해제(반디집으로 해제)
	> setup.exe 파일 실행 > 경로 C:\oraclexe\ 확인 후 설치 진행 > 비밀번호 1234 통일(관리자 sys 비밀번호)

- cmd에서 확인
	cmd > sqlplus 입력
	Enter user-name : sys as sysdba(관리자 권한 입력) 입력 후 1234(비밀번호는 화면에 직접 표기되지 않음!)

2) 오라클 기본 계정과 권한
	sys : Oracle DBMS 관리자 계정(총 관리자 계정)
	systme : DBMS 운영을 위한 관리자 계정
	hr : 학습을 위한 계정(기본적인 데이터가 들어있다)

	sysdba : 데이터베이스 생성 및 삭제 등 모든 권한을 의미(sys가 갖는 권한)
	sysoper : 데이터베이스 운영을 위한 권한을 의미(system이 갖는 권한) -> 생성, 삭제 등은 불가함

3) hr 계정 로그인
	hr 로그인 user-name : hr 입력 후 1234 엔터 -> locked 잠겨있어서 로그인 불가, 잠금해제 필요
	잠금 해제나 비밀번호 설정 등은 sys 계정만 할 수 있다
	hr 계정 잠금 해제
	> alter user hr account unlock; -- 결과 > User altered.(잠금해제, 수정가능)
	hr 계정 비밀번호 수정
	> alter user hr identified by 1234; -- 결과 > User altered.

	이후 로그인이 가능해진다

4) 디비버(DBeaver) 설치하기
	무료 db 접속 툴(도구)(각종 DBMS를 사용가능하다)
	사용하기 위해서는 java가 설치되어 있어야한다(jdk 11버전 이상)(학원에는 17버전 설치, 문제없이 사용)

- DBeaver 설정하기(처음에 뜨는 것들은 모두 x 누르기)
	파일 > 작업공간 전환(Switch Workspace) > 내 폴더의 workspace 설정(설정하게 되면 디비버 재시작)
	프로젝트 생성 후 진행
	새 데이터 베이스 연결(플러그 모양) > 오라클 선택 > 버전 xe선택 > 계정:hr,비밀번호:1234 > Test Connection
		
- 드라이브 연결(맨 처음 설치 후 1번 진행) 
	Edit Driver Settings > Libraries > 4개 삭제 후 > Add File > ojdbc6.jar 추가 > 확인
	- ojdbc 경로 : C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib


5) 새로운 프로젝트와 스크립트 파일 만들기
	- 프로젝트 클릭 > 프로젝트 생성 > 생성된 프로젝트 마우스 우클릭 Set Active 반드시 설정
	- 새 스크립트 파일 만들기 : ctrl + ]
	- 프로젝트 폴더 내 스크립트 마우스 우클릭 > create > create New File 클릭
	- 이름 변경 : F2 (Eclipse와 동일!)

6) DBeaver 단축키
	- 새로운 프로젝트 생성 : ctrl + n
	- 새로운 스크립트 파일 생성 : ctrl + ]
	- 쿼리문 실행 : ctrl + enter
	- 쿼리문 이동 : alt + 위아래 방향키
	- 주석
	 한줄 주석 : ctrl + /
	 범위 주석 : ctrl + shift + /
	- 한줄 쿼리 삭제 : ctrl + d

7) 기본 SQL문
- 쿼리문 작성방법
	여러줄에 걸쳐 작성이 가능하다
	실행에 영향을 주지는 않지만 가독성을 위해서 줄바꿈, 들여쓰기를 사용하는 것이 좋다
	(Java와 동일!)
	하나의 쿼리의 마침표는 ;(세미콜론)으로 작성한다
	대소문자를 구분하지 않는다(Java와 다름; 일반적으로 키워드는 대문자, 나머지는 소문자로 사용하기를 권장함)

- 주석(Comment)
	주석 처리된 SQL문은 실행되지 않는다
	한 줄 주석 ( -- ) : 해당 라인 줄을 주석처리할때 사용
	범위 주석 (/* */) : 범위 안에 있는 라인을 주석 처리할때 사용

- hr계정 내에 존재하는 employees 테이블
	11개 컬럼으로 이루어져있다
	107개의 행이 존재한다
	= 107명의 직원 데이터를 저장해둔 연습용 테이블

1. SQL문의 주요 특징
1) SQL
	데이터베이스를 관리할 때 사용하는 명령어
	SQL문, 쿼리문, 질의문 이라고 부른다
	
2) SQL문의 주요 특징
	한 줄씩 실행되는 인터프리터 언어(여러줄 동시실행 x)
	대소문자를 구분하지 않는다
	
※ 가독성을 위한 일반적인 사용법
	예약어는 대문자로, 그 외의 문자들은 소문자로 작성한다
		예약어(키워드) : 이미 정해진 역할이 있는 단어를 의미, SQL에서 실질적인 명령어들을 의미
			SELECT, FROM, ALTER, DROP, INSERT, ...
	여러줄에 걸쳐 작성한다
	들여쓰기를 활용한다

+) Oracle 11g의 HR 계정의 employees 테이블
	- 107명의 직원 데이터를 담고 있는 테이블
	- 11개의 컬럼
	EMPLOYEE_ID	직원ID, 직원번호
	FIRST_NAME	이름
	LAST_NAME	성
	EMAIL		이메일
	PHONE_NUMBER	전화번호
	HIRE_DATE	입사일
	JOB_ID		직무_ID
	SALARY		급여
	COMMISSION_pct	커미션 비율
	MENAGER_ID	상사직원의 ID
	DEPARTMENT	부서 ID


2. SELECT문
	테이블에서 데이터를 조회할 때 사용하는 명령어이다
	
	SELECT 컬럼명1, 컬럼명2 FROM 테이블명;
	SELECT *(전체컬럼 선택) FROM 테이블명;
	
- 정렬(테이블명 뒤쪽에 추가된다)
	
	SELECT [DISTINCT] 컬럼명 [AS "별칭"], 컬럼명 {"별칭"}, 컬럼명 [별칭], 컬럼명 ["별칭 입니다"]
	FROM 테이블명
	[ORDER BY 컬럼명 [ASC(오름차순) or DESC(내림차순)]];
	
	[]안에 있는 문은 생략 가능하다
	기본은 오름차순이라 생략시 ASC가 들어간 상태이다

	-- AS ""를 사용해서 별칭을 작성가능 AS와 ""도 생략 가능
	        (단, 별칭에 띄워쓰기가 있으면 생략 불가능)
	-- DISTINCT 중복 제거
	-- ASC 오름차순 정렬
	-- DESC 내림차순 정렬

- 해석순서
	 FROM -> SELECT -> ORDER BY 순 (항상 FROM절이 가장 처음으로 해석된다!)

- SQL 작성 순서
	SELECT 조회할 컬럼 생각 -> FROM 테이블명 생각 -> ORDER BY 정렬할 컬럼 생각(오름차순 ASC, 내림차순 DESC)
	* ORDER BY절에는 SELECT에서 별칭을 작성했다면 동일한 별칭으로 정렬할 수 있다

- SQL 실행 순서
	FROM -> SELECT -> ORDER BY

3. 자료형
1) 문자
	CHAR	: 고정길이 문자
		CHAR(용량)
		정해진 크기보다 작은 문자가 저장될 경우 남은 공간을 공백으로 채운다
		주로 문자의 수가 변하지 않는 값에 사용된다

	ex)	char(5)	'a'를 넣으면 a^^^^ 빈자리가 공백으로 채워진다 (^ = 공백)
		char(5) 'abcdef'를 넣으면 5자리를 초과하기 때문에 오류 발생

	VARCHAR2 : 가변길이 문자 
		▲굉장히 자주 쓰일 문자!
		VARCHAR2(용량)
		문자의 수만큼 공간이 배정되어 남은 공간을 공백으로 채우지 않는다
		문자의 수가 변화가 있는 값에 사용된다

	ex)	varchar2(5)	'a'를 넣어도 공백없음
		varchar2(5)	'hello'를 넣으면 hello 딱 맞게 저장
		varchar2(5)	'abcdef'를 넣으면 5자리를 초과하기 때문에 오류 발생

2) 숫자
	NUMBER
		number(precision)		정수
		number(precision, sacle)	실수
		precision : 정밀도(최대 유효숫자 자리수)	scale : 소수점 기준 자리수
		precision 이상의 값이 들어올 경우 오류 발생
		s가 양수면 소수점 이하, 음수면 소수점 이상 자리수, s범위 밖의 값은 반올림되서 적용된다

	ex)	NUMBER(3)
			123 -> 123
			1234 -> 오류발생
			12 -> 12
	
		NUMBER(5, 2)	=> precision = 5, scale = 2
			123.45	-> 123.45
			1234.56	-> 오류 발생(전체자리 5자리인데 6자리로 초과 오류 발생)
			123.456	-> 123.46(소수점 2자리까지 반올림 -> 3번째 자리수에서 반올림)
			123.2	-> 123.20(소수점 이하 2자리까지 맞춰서 출력)
		
		NUMBER(5, -2)
			12345	-> 12300(소수점이상 자리수에서 반올림)
					(-2로 인해 뒷 2자리가 소수점처리, 반올림)
		NUMBER(5, -3)
			12678	-> 13000(소수점이상 자리수에서 반올림)
					(-3로 인해 뒷 3자리가 소수점처리, 반올림)

3) 날짜
	DATE		날짜와 시간, 형식(format)에 맞추어 값을 테이블에 저장하여 사용
	TIMESTAMP	소수 초까지 정확하 날짜/시간 값을 저장하는 경우 사용

	ex) DATE
		'2025-07-08'	-> 2025-07-08 00:00:00
		SYSDATE -> 현재 날짜와 시간

	    TIMESTMAP
		'2025-07-08 11:47:30.345' -> 2025-07-08 11:47:30.345	

4) 대용량
	BLOB(Binary Large Object)	: 바이너리 대형 객체(이미지, 오디오, 비디오)
		이진 파일을 다룰 때 사용
	CLOB(Character Large Object)	: 문자 대형 객체(큰 문자열이나 문서)
		최대 4GB 문자열 저장 가능
		long 타입을 개선한 데이터 타입

4. 연산자
※ 연산자에서는 피연산자 자리에 어떤 타입의 값이 오는지
	연산자가 어떻게 동작하는지
	연산의 결과가 어떤 타입의 값인지 아는것이 중요하다!!!
1) 단항연산자
	양수	+
	음수	-

2) 산술연산자
	더하기	+
	빼기	-
	곱하기	*
	나누기	/
	피연산자 자리에는 숫자 타입을 사용한다, 연산의 결과는 숫자이다.

3) 연결연산자
	연결연산자(Concatentaion) ||
	a || b : a와 b 데이터를 하나의 문자열로 연결한다
	피연산자 : 숫자, 날짜, 문자 타입 사용 가능하다.

4) 관계(비교)연산자
	a > b	: a가 b보다 크다(초과)
	a < b	: a가 b보다 작다(미만)
	a >= b	: a가 b보다 크거나 같다(이상)
	a <= b	: a가 b보다 작거나 같다(이하)
	a = b	: a와 b가 같다
	a != b	: a와 b가 같지 않다(sql에서는 '같지 않다'를 쓸때 <>가 표준이다)

	WHERE 절 : 원하는 행을 조회하거나 연산처리한다

	SELECT [DISTINCT] 컬럼명 [AS "별칭"]  -- 3
	FROM 테이블명                        -- 1
	WHERE 조건식                        -- 2
 	[ORDER BY 컬럼명 [ASC / DESC]];     -- 4

	FROM -> WHERE -> SELECT -> ORDER BY
	테이블의 행에서 조건식 실행 후, 컬럼에서 뽑아내겠다

5) 논리연산자 
	조건형이므로 논리연산자도 WHERE절에 사용한다!
	AND : a AND b	a조건과 b조건이 둘 다 참이라면 참, 아니라면 거짓
	OR  : a OR b	a조건과 b조건 중 둘 중 하나라도 참이면 참, 둘 다 아니라면 거짓
	NOT : NOT a	a조건이 거짓이라면 참, 참이라면 거짓


6) SQL연산자
	SQL에서만 존재하는 연산자
	
BETWEEN a AND b		a이상 b이하인 조건을 만족하면 true
	BETWEEN 숫자a AND 숫자b	숫자a 이상, 숫자b 이하인 조건이면 true
	BETWEEN 날짜a AND 날짜b	시작날짜 a부터 종료날짜 b 사이의 날짜이면 true

	- a와 b 사이의 대소관계 비교가 진행되기 때문에 BETWEEN 작은 값 AND 큰 값으로 사용해야한다
	- 날짜 사용시 BETWEEN 예전날짜 AND 최근날짜로 사용해야한다

IN(a, b, c, ...)	a 또는 b 또는 c인 조건을 만족하면 true
	
LIKE			문자열의 패턴을 검색하기 위해 사용한다
		%	어떤 문자를 포함한 모든 문자
		_	단일 문자(문자의 길이 저장)

		a%	a로 시작하는 모든 문자(a 뒷문자는 상관x)
		%a	a로 끝나는 모든 문자(a 앞문자는 상관x)
		%a%	중간에 a가 들어가는 모든 문자

IS NULL / IS NOT NULL	데이터의 NULL 여부를 판단하기 위해 사용한다
		NULL	데이터가 존재하지 않음을 나타내는 값
	IS NULL		값이 NULL일 경우
	IS NOT NULL	값이 NULL이 아닐 경우

	- 숫자와 날짜 데이터를 NULL과 연산하면 결과는 NULL(산술표현식은 항상 결과가 NULL로 평가된다)

UNKOWN			결과를 알 수 없음, 조회할 수 없음 을 나타냄	
		NULL값과 조건을 사용하거나 NULL값 결과와 함께 사용할 경우 UNKOWN

	a = NULL	=> UNKOWN으로 평가되므로 조건을 만족하는 행이 없어서 결과가 출력되지 않는다
	a != NULL	=> UNKOWN으로 평가되므로 조건을 만족하는 행이 없어서 결과가 출력되지 않는다

	- 오라클은 길이가 -인 문자값을 NULL로 처리한다
	
7) NULL 관련 함수 => 테이블 생성 후 쿼리문 작성
※ SQLD 시험볼거면 꼭 알아야함 ※
- NULL이면 특정 값으로 변경이 가능하다
	NVL(컬럼명, 기본값) : 해당 컬럼의 값 중에 NULL이 있다면 지정한 값으로 출력
	NVL2(컬럼명, NULL이 아니면 사용할 값1, NULL이면 사용할 값2) : 
	NULL이 아니면 값1, NULL이면 값2가 출력

- 특정 값이면 NULL로 변경
	NULLIF(컬럼명, 값1) : 컬럼의 값이 값1과 같으면 NULL로 변환, 같지 않다면 컬럼 값이 사용
	NULLIF(컬럼명1, 컬럼명2) : 컬럼1과 컬럼2의 값이 일치하면 NULL로 변환, 아니라면 컬럼1의 값이 사용
	
- COALESCE(값1, 값2, 값3) : 값1, 값2, 값3, ... 중 NULL이 아닌 최초의 값


5. 쿼리문(SQL)의 종류
	SQL 명령어의 성격에 따라 분류한 것이다

	DDL (Data Definition Language)	  : 데이터 정의어
		 데이터 구조(테이블 정의)를 만들고 바꾸는 명령어
	DML (Data Manipulation Language)  : 데이터 조작어
		데이터 자체를 다루는 명령어
	DCL (Data Control Language)	  : 데이터 제어어
		권한 부여와 회수
	TCL (Transation Control Language) : 트랜잭션 제어어
		트랜잭션 제어(DML의 변경 내용을 확정/취소)

1) DML : 데이터 조작 언어(데이터 조작어)
- SELECT : 조회
	SELECT [DISTINCT] 컬럼명 [AS "별칭"]
	FROM 테이블명
	WHERE 조건식
	ORDER BY 컬럼명 ASC or DESC;

- INSERT : 추가 (추가할때는 생략이 불가하다)
	원하는 컬럼만 골라서 값을 저장할 때 사용
	INSERT INTO 테이블명(컬럼명1, 컬럼명2, ...)
	VALUES (값1, 값2, ...)

	전체 컬럼에 값을 저장할 때 사용
	INSERT INTO 테이블명(컬럼명은 테이블명 만들때 그대로!)
	VALUES (값1, 값2, ...)
	
- UPDATE : 수정
	UPDATE 테이블명
	SET 컬럼명1 = 값1, 컬럼명2 = 값2
	[WHERE 조건식];
	
- DELETE : 삭제
	DELETE FROM 테이블명
	[WHERE 조건식];

----------------------------------------------------------
[과제]	자바 컬렉션 프레임워크와 예외처리를 이용한 과제 1문제
	(패키지명 : day20_강승훈)(zip파일로 압축해서 보내기)

1. 학생 성적 관리 프로그램(ArrayList 이용)
	사용자 입력을 받아 이름과 점수를 저장
	클래스명 : Student (toString 오버라이딩, equals 오버라이딩)
		모든 필드 : private 접근제한자 사용
		이름
		수학점수
		영어점수
		국어점수
	
		생성자 : 이름과 나이만 받는 생성자, 기본생성자 x, getter setter 없어도 ㄱㅊ
		메소드 : 정수의 합을 구하고 반환하는 메소드(total)
			평균점수 구하는 메소드(pringAvg)
			학생의 점수를 저장하여 반환하는 메소드(addScore)
			
	메인 클래스 : StuMain
   조건:	- 학생은 최대 7명까지만 존재하고 7명 학생들의 각 평균점수를 출력하기
	- 반드시 ArrayList 객체 사용하여 학생 객체들을 저장할 것!
	- 학생 이름이 동일하면 1명의 학생으로 인식할 것!	=> hashCode의 값은 나이로 반환
	- 점수는 0점 ~ 100점 사이의 값이여야만 한다
	- 예외처리 필수 진행(예외처리 클래스 만들어서 진행할 것!)



























































































day24 (dbms 6일차) 개념
복습 -> 집계함수와 GROUP BY, HAVING -> 서브쿼리 -> ROWNUM -> JOIN -> 집합연산 -> VIEW -> DCL -> TCL -> CASE 표현식

0. 복습
1) 이상현상
	데이터베이스 설계가 잘못되어 발생하는 문제

- 삽입이상		새로운 데이터를 삽입하기 위해 불필요한 데이터도 같이 삽입해야하는 문제
- 갱신이상		중복 행 중에서 일부만 변경하여 데이터가 불일치하는 모순의 문제
- 삭제이상		행을 삭제 시 필요한 데이터도 같이 삭제되는 문제

2) 정규화(Normalization)
	삽입/갱신/삭제 이상현상을 제거하기 위한 목적을 가진 작업
	데이터의 중복을 최소화하는데 목적

- 1차정규화
	테이블의 모든 컬럼의 값은 원자값(단일값)을 가져야한다
	반복되는 그룹을 별도의 테이블로 분리해야한다

- 2차정규화
	1차 정규화를 만족해야한다
	기본키가 복합키일 경우 부분함수 종속 제거해야한다

- 3차정규화
	이행적 함수를 제거하여 테이블 분리한다
	
1. 집계함수와 GROUP BY, HAVING
1) 집계함수
	그룹화된 데이터를 집계 연산을 통해 하나의 결과로 얻게된다
	집계함수는 NULL값을 제외하고 진행된다
	
	COUNT()		NULL값을 포함한 행의 개수 확인
	COUNT(컬럼명)	NULL값을 제외한 행의 개수 확인
	SUM([DISTINCT | ALL] 표현식) 	NULL을 제외한 행의 합계
	AVG([DISTINCT | ALL] 표현식) 	NULL을 제외한 행의 평균
	MAX([DISTINCT | ALL] 표현식) 	최대값(문자, 날짜도 가능)
	MIN([DISTINCT | ALL] 표현식)	최소값(문자, 날짜도 가능)
	STDDEV([DISTINCT | ALL] 표현식) 	표준편차
	SUM([DISTINCT | ALL] 표현식) 	분산

2) SELECT문 해석 및 작성 순서
	해석순서 : FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY
	작성순서 : SELECT -> FROM -> WHERE -> GROUP BY -> HAVING -> ORDER BY

	SELECT [DISTINCT] 컬럼명 [AS 별칭]
	FROM 테이블명
	[WHERE 조건식]
	GROUP BY 그룹화
	HAVING 그룸 조건식
	ORDER BY 정렬할컬럼 [ASC, DESC];

- SELECT 절에 없는 컬럼을 ORDER BY 절에서 사용 가능
- GROUP BY 절에서 그룹핑 기준을 정의하면 GROUP BY 절의 그룹핑 기준에 사용된 컬럼과
	집계함수에 사용될 수 있는 숫자형 데이터 컬럼들의 집합을 새로 만듦

3) GROUP BY, HAVING 절
	GROUP BY 절은 특정 컬럼에 있는 값을 그룹으로 묶어서 데이터를 집계한다
	ORDER BY 절과 동일하게 SELECT문에서 사용되며 위치는 WHERE 절 다음, ORDER BY절 이전에 작성된다
	HAVING 절은 GROUP BY 다음에 사용할 수 있으며 SELECT의 WHERE절처럼 GROUP BY의 HAVING 조건을 걸어준다

- GROUP BY : 같은 값을 가지는 행들을 그룹화하여 집계연산을 수행할 때 사용
- HAVING : GROUP BY로 묶은 결과에 조건을 걸고 필터링 할 때 사용

	WHERE절은 쿼리문 전체에 조건을 걸어서 데이터를 가져오며
	그 데이터들을 GROUP BY로 묶어주는데 묶은 데이터에 조건이 필요하거나 집계함수를 사용해야한다면 HAVING절에 작성한다
	WHERE절은 집계함수 사용불가능, HAVING절은 집계함수 사용가능
	WHERE절에 우선적으로 처리할 조건식을 작성해야 속도가 빠르다
	
2. 서브쿼리(SUB QUERY)
	하나의 쿼리 내에 작성하는 또 다른 쿼리
	서브쿼리의 위치에 따른 종류
		- FROM절 : INLINE VIEW
		- SELECT절 : SCALAR
		- WHERE절 : SUB QUERY (WHERE절에서 가장 많이 쓰임)

1) 인라인 뷰(INLINE VIEW)
	FROM절 안에 또 다른 쿼리문을 작성한다
	서브쿼리의 결과를 가상 테이블처럼 사용한다

2) 스칼라 서브쿼리(SCALAR)
	SELECT 절 안에 또 다른 쿼리문을 작성한다
	단일 컬럼, 단일 행을 반환한다(1개의 값으로 사용)

3) 서브쿼리(SUB QUERY)
	WHERE 절 또는 HAVING 절 안에 또 다른 쿼리를 작성한다
	
연관 서브쿼리(Correlated Subquery)
	서브쿼리가 메인쿼리의 컬럼을 참조한다
	메인쿼리의 각 행마다 반복 실행된다(성능에 주의가 필요하다)
	(= 각 실행마다 하나씩 다 확인한다)

비연관 서브쿼리(Non-Correlated Subquery)
	서브쿼리가 메인 쿼리의 컬럼을 사용하지 않는다
	메인쿼리와 독립적으로 실행가능하다
	일반적으로 한 번만 실행된다	

단일행 서브쿼리(Single_Row Subquery)
	하나의 값만 반환
	연산자 : =, >, <, >=, <=, <>(!=)
	
다중행 서브쿼리(Multi-Row Subquery)
	여러 행(값) 반환
	연산자 : IN, ANY, ALL, EXISTS, SOME

-- IN : 여러 값 중 포함 여부 판단
-- ANY : 하나라도 조건을 만족하면 TRUE
-- ALL : 전부 조건을 만족해야 TRUE

3. ROWNUM
	결과 행 앞에 1부터 1씩 증가하는 시퀀스를 붙여준다
	ROWNUM은 컬럼처럼 사용할 수 있다
	*를 다른 컬럼과 함께 조회하게 되면 소속(어디 테이블인지)을 명시해줘야한다
	테이블에 ALIAS를 부여하고 해당 별칭을 * 앞에 명시해준다(별칭.*)

	1위 ~ 5위까지 구하는 경우 같은 때에 쓰면 좋다!(순위 확인)


4. JOIN
	여러 테이블에 흩어져 있는 정보 중 사용자가 필요한 정보만 가져와서 가상의 테이블처럼 만들고 결과를 보여주는 것
	정규화를 통해 조회 테이블이 너무 많이 쪼개져있으면 작업하기 불편하기 때문에 입력, 수정, 삭제의 성능을 향상시키기 위해
	JOIN을 통해 합친 후 사용한다

1) JOIN의 종류
- 내부조인(INNER JOIN)		공통 존재 컬럼의 값이 같은 경우를 추출하는 기법
- 외부조인(OUTER JOIN)	왼쪽 외부조인	: 왼쪽 테이블의 모든 데이터와 오른쪽 테이블의 동일 데이터를 추출하는 기법
			오른쪽 외부조인	: 오른쪽 테이블의 모든 데이터와 왼쪽 테이블의 동일 데이터를 추출하는 기법
			완전 외부조인	: 양쪽의 모든 데이터를 추출하는 기법

- 교차 조인			조인 조건이 없는 모든 데이터 조합을 추출하는 기법
- 셀프 조인			자기자신에게 별칭을 지정한 후 다시 조인하는 기법

2) 내부조인
	조건이 정확히 일치하는 값만 합쳐서 조회
	[] : 생략가능

	SELECT A.컬럼명1, A.컬럼명2, B.컬럼명1, B.컬럼명2
	FROM 테이블명1 A [INNER] JOIN 테이블명2 B
	ON [조인조건] -- A.컬럼명1 = B.컬럼명1
	[WHERE 검색조건];


- 등가조인
	두 테이블간의 컬럼의 값이 서로 일치할 때 ON절에 등호(=)가 있을 때
	일반적으로 PK <-> FK 관계를 이용하여 조인을 주로 사용한다
	두 테이블 간의 관계가 있다면(FK가 존재한다면) 부모 테이블의 PK와 자식 테이블의 FK를 등호로 비교가 가능하기 때문에
	등가 조인 사용이 가능하다

- 비등가조인
	두 테이블의 특정 컬럼이 일치하지 않는 경우, ON절에 등호(=)가 없을때
	= 연산자가 아닌 BETWEEN, >, >=, <, <= 등의 연산자를 사용한다

★★★★★ SQL 실행 순서
	FROM → ON → JOIN → WHERE → GROUP BY → HAVING → SELECT → ORDER BY
	
	FROM : 테이블이나 뷰의 데이터를 가져오기
	ON : JOIN절의 조건 평가
	JOIN : 지정된 조건에 따라 두 개 이상의 테이블을 조인(합치기)
	WHERE : 조건에 맞는 행을 필터링
	GROUP BY : 데이터 그룹화(집계함수와 주로 사용)
	HAVING : GROUP BY로 그룹화된 데이터에 대해 조건 적용
	SELECT : 조회할 컬럼을 선택(중복제거, 집계함수, 별칭)
	ORDER BY : 최종 결과를 정렬(별칭, ASC/DESC)

- ON절의 조건은 JOIN 되면서 실행되고, WHERE절의 조건은 JOIN이 모두 끝나고 나서 실행된다
ON절과 WHERE절을 같이 사용했을 때와 ON절만 사용했을 때의 결과가 같다면 ON절만 사용하는 것이 좋다


3) 외부조인(OUTER JOIN)
	내부조인과는 다르게 한쪽에만 값이 있어도 테이블을 합쳐서 보여준다

- 왼쪽 외부 조인 => 왼쪽 테이블 기준 / 오른쪽 테이블에 일치하는 컬럼이 없을 때는 오른쪽의 컬럼값은 NULL로 채워진다
	SELECT A.컬럼1, A.컬럼2, B.컬럼1
	FROM 테이블1 A LEFT [OUTER] JOIN 테이블2 B
	ON 조인조건
	[WHERE 검색조건];

	A.책번호 A.책이름		B.책번호 B.가격	
	1	A		1	10000



- 오른쪽 외부 조인 => 오른쪽 테이블 기준 / 왼쪽 테이블에 일치하는 컬럼이 없을 때는 왼쪽의 컬럼값은 NULL로 채워진다
	



























































































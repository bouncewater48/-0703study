day03(java 1일차)
git 실습 -> git 명령어 -> java란 -> java 설치(jdk17, 이클립스)

1. git 명령어
	$ git clone url주소 폴더경로	
	깃허브에 있던 로그기록까지 모두 가져올때 사용 / 팀 프로젝트 시작 시 clone을 받고 시작
	$ git init
	git의 과거 폴더 생성시 사용
	$ git add . or 파일명
	staging 영역(관리대상)으로 만들때 사용
	$ git rm --cached 파일명

	$ git commit -m "커밋메시지" :

	$ git branch 
	현재 만들어져있는 브런치 확인가능
	$ git branch -m 기존ㄹ브런치명 변경할브런치명
	브런치명 변경
	$ git branch 브런치명
	브런치를 생성할때 사용
	$ git branch -D 삭제할브런치명
	브런치 삭제
	$ git remote -v
	원격으로 연결됐는지 유무 확인
	$ git remote add 원격주소이름 주소 
	원격주소 추가
	$ git remote set-url 원격주소이름 주소
	원격주소링크 변경
	$ git remote remove 원격주소이름
	원격주소 제거
	$ git remote rename 기존원격주소이름 변경할원격주소이름
	원격주소이름 변경
	$ git switch 이동할브런치명
	브런치 변경(이동)
	$ git merge 병합할브런치명
	브런치 병합(현재 브런치에 뒤에 적은 브런치를)
	$ git log 
	체크섬 확인
	$ git checkout 체크섬 or -
	체크섬 앞 7자리 확인
	$ git push 원격주소이름 브런치명
	로컬 저장소에서 원격 저장소로
	$ git pull 원격주소이름 브런치명
	원격 저장소에서 로컬 저장소로
	$ git pull 원격주소이름 브런치명 --allow-unrelated-histories
	
	$ echo "내용" > 파일명.txt
	$ ls -al 현재 폴더 위치의 파일 목록 확인
	
 자바 제어문 / 메소드와 클래스 / 상속 / 컬렉션 프레임워크
	자바 공부 중 급격히 난이도 올라가는 지점들

2. java
1) 컴퓨터
	마우스, 키보드, 모니터, 하드웨어, 하드디스크,cpu, 그래픽카드, 메인보드
	ssd, hd, RAM, power, 게임, 인터넷, 계산기, 워드, 메모장, ...

	하드웨어(HW) : 마우스, 키보드, 모니터, 파워, 메인보드, 그래픽카드, ...
	소프트웨어(SW) : 인터넷, 게임, 계산기, 워드, 메모장, 카카오톡 ...


	컴퓨터 = 하드웨어 + 소프트웨어

2) 컴퓨터 언어
	저급 언어 : 컴퓨터가 이해하기 쉬운 언어
		기계어, 어셈블리어
		배우기 어렵고 유지보수가 힘듦
		실행속도가 매우 빠름
	고급 언어 : 사람이 이해하기 쉬운 언어
		Java,Python,C++		
		일상언어에서 사용하는 표현을 그대로 가져다 쓸 수 있음
		이식성이 높음{운영체제(OS)}(운영 체제에 따라서 영향을 받지 않는다)
		
		


3) 번역 프로그램
	저급언어 --- 번역 프로그램 --- 고급언어
		   컴파일러(한줄씩 통짜번역) : JAVA	
		   인터프리터(동시번역) : Javascript, Python, ...


4) Java
Java	(문법을 정확히 안 지키면 실행 시 오류가 발생하는 언어)
	프로그래밍 언어

프로그래밍 언어 
	개발자와 컴퓨터가 소통하기 위한 언어
	
소스코드 (사람이 이해하기 위해 만든 언어)
	컴퓨터와 개발자가 소통할 수 있는 언어로 작성할 수 있는 언어로 작성한 것

컴파일러 
	컴파일 작업을 해주는 번역기

컴파일 
	사람의 언어를 컴퓨터의 언어로 번역해주는 작업

5) 프로그램의 동작 원리
	<일반 프로그램>		<JAVA 프로그램>
	프로그램			프로그램
					JVM(java virtual machine)(자바 가상 운영체제)(설치를 하고 진행을 해야함)
	운영체제(OS)		운영체제(OS)
	하드웨어			하드웨어

	일반 프로그램이 실행 -> 프로그램을 구성하는 명령어와 데이터가 운영체제에 의해 메모리(RAM)에 적재
	-> 프로그램이 메모리에 적재되어 실행중인 상태(프로세스) -> CPU가 메모리에 있는 exe 파일 해석 및 실행

- JVM(Java Virtual Machine)
	운영체제에 맞춰서 java로 만든 프로그램을 실행시켜준다

	javac : .java파일(사람의 언어로 된 파일) 컴파일
	java : .class파일(컴퓨터 언어로 된 파일) 실행

	작성한 소스코드는 .java 파일로 만들어짐 -> 자바 컴파일러가 .class 파일로 변환(java bytecode)
	-> JVM이 OS(운영체제)가 bytecode를 이해할 수 있도록 도와줌
	자바 컴파일러는 jdk를 설치하면 bin폴더에 존재하는 javac.exe 파일을 의미한다.	


- JRE(Java Runtime Enviroment)
	JVM을 실행한다
	JVM을 실행할 때 필요한 라이브러리 파일 등을 가지고있다.

- JDK(Java Development Kit)
	JRE를 포함한다 (JRE와 JVM을 모두 가지고 있음)
	JRE 외에 개발에 필요한 도구들을 가지고 있다.
 
3. JDK 설치
1) JDK 설치 확인 방법
	windows + r > cmd (w+r로 키면 자동으로 관리자모드)
	java -version
	javac -version

2) JDK 삭제 방법
프로그램 설치 및 제거 -> Java(TM)설치된거 클릭 후 제거
Java 17버전 미만일 경우 제거하고 재설치가 필요함
프로그램 설치/삭제 시 cmd창은 반드시 닫고할것(열려있으면 오류날 가능성 있음)

Java SE Development Kit 17.0.12
17.0.12 > 메이저번호 - 마이너번호 - 패치번호


3_JDK 설치
	구글 검색창에 JDK17 검색 > 제일 상단의 오라클 홈페이지 접속
	> windows x64 Installer exe 파일 다운로드 
	> mac m1 칩 Arm64 DMG Installer 파일 다운로드
	> 설치 프로그램 실행 > 설치 경로 중에 Program Files 경로 제거(C:\java\)
	
	설치완료후 cmd > java -version
			javac -version

	아래는 내가 쓴거, 위에는 강사님이 적은것
	Windows x64 Installer 다운로드 > java - resource 폴더로 ctrl+x로 옮김
	설치위치 변경 - c드라이브 - 새폴더 생성 - java로 이름 변경 - 설치


	c드라이브 - java - bin - (java.exe,javac.exe 설치된거 확인)
	cmd에서 java -version 서치 - 
	C:\Users\Administrator>java -version



3) IDE(통합 개발 환경)
- 이클립스 설치
	https://www.eclipse.org/downloads/packages/release < 설치 홈페이지
	상단 링크로 접속 > 원하는 버전 클릭(2024.12) > Eclipse IDE for Enterprise Java and Web Developers(톱니바퀴)
	> Windows x86_64 다운로드

	압축 풀 때 반디집으로 압축풀기!!(기본 윈도우 압축풀기하면 오류남)	
	최신 버전은 오류가 자주 뜨기에 작년 24년 12월꺼로 설치함
	
- 이클립스 설정(window > Preferences)
	글씨체 변경
	font 검색 > Colors and Fonts 클릭 > Basic - Text Font 클릭하고 Edit 클릭 > 원하는 글꼴과 크기 설정하고 확인
	> Apply

	인코딩 타입 변경(한글이 안깨지게 하기 위해서 타입 변경)(다른 인코딩 방식을 채용한 파일을 주고받으면 파일이 깨짐)
	esc 검색 > Workspace 클릭 > Text file encoding > Other- UTF-8 설정된 것 확인

	컴파일러 변경
	compiler 검색 > level 21에서 17로 변경(JDK 설치버전에 맞게 변경) > Apply

	관점 변경
	perspective 검색 > 기본적으로 java EE로 되어있음 > JAVA로 변경 > Apply and Close

이클립스 - 


압축파일을 그대로 사용하면 오류가 높은 확률로 터지기에 압축해제용 프로그램 사용이 필요함(학원에서는 반디집)

압축해제할때 반디집으로 해제
압축폴더를 Java - resource로 지정, 실행파일 바로가기 만들기 생성 후 java폴더에 붙여넣기
D:\web_0900_ksh\Java\workspace로 경로설정
오픈했을때 나오는 welcome 화면은 x 눌러서 끄기



이클립스 

Create a java script 클릭 > 프로젝트 이름 day03 > JRE버전 JavaSE-21에서 17로 변경 > 아래 Module은 해제
> 프로젝트를 만들때의 기본

실수로 왼쪽ui를 지웠을 경우 : 위쪽 Window > Show View > Package Explorer 클릭하면 다시 나옴

src 우클릭 > New > Package > Finish 클릭 
day03 > New > Class > Name:Test01(제목의 첫글자는 반드시 대문자!)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
[*Test01.java] < 파일명 앞쪽 *는 저장이 아직 안됐다는 표시이다(메모장과 동일, ctrl+s로 저장가능)

package day03;

public class Test01 {

}


class 뒤의 Test01 << 클래스 제목과 동일해야함, 다르면 오류 취급


package day03;

public class Test01 {
	public static void main(String[] args) {
		
	}
}


위 모양이 기본 시작점이다

package day03;

public class Test01 {
	public static void main(String[] args) {
		System.out.println("hello");
	}
}

상단 바에서 벌레모양 우측 재생버튼 누르면 아래에 Console 창에 결과가 출력됨
hello

[Test01.java],[console] 버튼이 있는 칸을 누르고 드래그해서 위치 변경 가능.

**지금 모르는 내용이 있다고 그거 공부한다고 그거만 파지 말것, 남들보다 뒤쳐진다




4. 자바의 구성 요소
	자바 프로젝트 > 패키지 > 클래스 > 메소드 

	* 클래스는 앞글자가 대문자!!!
	* 메소드는 이름 뒤에 소괄호()가 온다

	세미콜론;
		자바에서는 세미콜론(;)으로 문장의 끝을 표시한다.(마침표와 동일한 기능)
	
	중괄호{}
		자바에서는 중괄호{}로 영역을 표시한다.(파이썬에서는 사용x, 자바에서만임)

	들여쓰기(Tab)
		자바에서는 들여쓰기가 코드에 영향을 주지 않는다.
		단지 가독성을 높히기 위해 사용한다.(사람이 봐야하는데 한줄로 적으면 가독성이 너무 떨어짐)

	콘솔(console)
		사용자와 운영체제가 소통한 결과를 나타내는 창(개발자를 위한 창)(개발자가 코드를 작성하고 제대로 나오는지 확인용)

	주석(왠만하면 모든데에 다 주석으로 해석본을 달아둔다고 생각하는게 좋음)
		   프로그램 실행에 영향을 끼치지 않는다
		1. 개발자간의 소통 -> 소스코드에 대한 설명글으 작성할 때 사용함
		2. 지금 당장 사용하지 않는 코드가 있을 때, 나중을 위해 달아둠(시간이 지나면 잊어버리기 마련)
		* 모든 코드 해석을 할 때 주석을 사용한다
		//	한줄주석
		/* */   범위주석(중간이 전부 주석임)
		/** */  API 주석(당장은 안씀, 나중에 배울 예정)


자바 프로젝트에서 패키지든, 클래스든 동일한 제목은 사용해서 안된다
다른 프로젝트에 있는건 동일 제목이든 말든 상관없음

D:드라이브 Java workspace 폴더 안에 자동으로 .metadata 폴더가 만들어져있고, 이 안에 이클립스에서 한것들이 자동저장됨

src 파일은 그냥 올리면 충돌 가능성이 있기에, git에서 ignore 폴더에 넣어야함(충돌무시)

src 파일 안에 class 파일이 없다고 필요없는게 아님, bin 폴더 안에 자동으로 class 파일이 생겨나 저장됨.

public static void main(String[] args) {
		// main 쓰고 ctrl + space bar 엔터 main 메소드 자동완성

System.out.println("강승훈");
		// syso 쓰고 ctrl +space bar 엔터 출력 메소드 자동완성 단축키

// 실행 단축키 ctrl + F11 



5. 이클립스 단축키(윈도우 기준)
	ctrl + n : 새로운 파일 생성(프로젝트, 패키지, 클래스)
	ctrl + s : 저장
	ctrl + F11 : 실행
	F2 : 파일 이름 변경
	main + ctrl + space bar : main 메소드 자동생성
	syso + ctrl + space bar : 출력 메소드 자동생성
	ctrl + / : 한줄 주석
	클래스 생성 창에서 글자 아래에 _(밑줄) 그어진건 alt + v로 바로 이동가능 / tab 키를 여러번 누를 필요가 없음









































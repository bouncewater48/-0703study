day18 (java 16일


=======================================================================
package apitest;
//
//import lambdaTask.CombInter;
//
//// 1번 : api
//public class ApiTest {
//	public static void main(String[] args) {
//		CombInter ci = new CombInter() {
//			
//			@Override
//			public String combine(String str1, String str2) {
//				return str1 + str2;
//			}
//		}; 
//		System.out.println(ci);
//		System.out.println(ci.combine("hello ", "java"));
//	}
//}



=======================================================================

package apitest;

class MyClass<T> {
	// 필드
	T data;

	// 생성자
	public MyClass(T data) {
		super();
		this.data = data;
	}

	// 메소드
	void printData() {
		System.out.println(data);
	}

}

public class ArrayListTest02 {
	public static void main(String[] args) {
//		클래스에서 제네릭을 지정하는 경우, 내가 타입을 원하는거로 지정 가능
//		MyClass mc1 = new MyClass(1.5);
//		MyClass<Integer> mc1 = new MyClass(1.5);
		MyClass<Integer> mc1 = new MyClass<>(1);

		System.out.println(mc1);
		mc1.printData();
		
		MyClass<String> mc2 = new MyClass<String>("java");
		System.out.println(mc2);
		mc2.printData();
	}

}


=======================================================================

package apitest2;
// 2.
import apiTest2.Calc;

public class Apitest2 {
	public static void main(String[] args) {
		Calc cal = new Calc();
		System.out.println(cal.divide(10, 5));
		//buildPath에서 x표시가 뜨는게 있으면 지우고 할것
//		x표시 뜨는게 남아있으면 다른것들도 같이 실행불가 상태가 됨
	}
}


=======================================================================

package ObjectTest01;
// 3번 : Object 클래스 - toString 메소드
public class Student {
	//필드
	String name;
	int javaScore;
	int dbmsScore;
	int total;

	//생성자
	public Student(String name, int javaScore, int dbmsScore, int total) {
		super();
		this.name = name;
		this.javaScore = javaScore;
		this.dbmsScore = dbmsScore;
		this.total = total;
	}
	  //메소드
	@Override
	public String toString() {
//		return super.toString();
//		return getClass().getName() + "@" + Integer.toHexString(hashCode());
//		public native int hashCode();
//		native : 다른 언어에서 자바로 변환할때 쓰임
		return "Student [name : " + this.name + ", javaScore : " + this.javaScore
				+ ", dbmsScore  :" + this.dbmsScore + " ]";
	}
}


=======================================================================

package ObjectTest01;
//3번 : Object 클래스 - toString 메소드
public class ToStringTest {
	public static void main(String[] args) {
		Student st1 = new Student("짱구", 100, 100, 100 + 100);
		System.out.println(st1);
		System.out.println(st1.toString()); //st1이랑 결과가 동일함!
//		Student [name : 짱구, javaScore : 100, dbmsScore  :100 ]
//		Student [name : 짱구, javaScore : 100, dbmsScore  :100 ]
	}
}


=======================================================================

package ObjectTest02;
// 4번 :  Object 클래스 -  equals() 메소드
public class User {
	//필드
	String name;
	int age;

	//생성자
	public User(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}

	//toString 메소드 오버라이딩
//	toString메소드 단축키 : alt + shift + s + s
	@Override
	public String toString() {
		return "User [name=" + name + ", age=" + age + "]";
	}
//	재정의
	//Object 메소드 오버라이딩
//	@Override
//	public boolean equals(Object obj) {
//		// TODO Auto-generated method stub
//		return super.equals(obj);
	
	@Override
	public boolean equals(Object obj) {
//		return (this == obj); //메모리 주소값으로 비교하겠다
		if(this == obj) {
			return true;
	}
		
//		//이름이 같은 경우 => 같은 객체로 판단
//		if(obj instanceof User) {
//			String other = ((User)obj).name;
//			if(this.name.length() == other.length()) {
//				for(int i = 0; i < this.name.length(); i++) {
//					if(this.name.charAt(i) != other.charAt(i)) {
//						return false;
//					}
//				}
//				return true;
//			}
//		}
		
		//이름이 같은 경우(짧은 코드 가능!)
//		위에 35번~ 조건문과 동일함!
		if(obj instanceof User) {
			String other = ((User)obj).name;
			return this.name.equals(other);
		}
		return false;
	}
	
	
	//equals를 재정의하면 hashCode도 재정의해야한다
	//동일 객체에 대해 같은 hashCode값이 반환되도록 한다
	//이름을 해시코드값으로 쓸 때는 name.hashCode()
	//나이를 해시코드값으로 쓸 때는 Interger.hashcode(age)
	//해쉬코드 오버라이딩, 재정의
	@Override
	public int hashCode() {
		// TODO Auto-generated method stub
		return this.age;  
//		name의 해쉬코드값 반환
	}
	
}


=======================================================================

package ObjectTest02;

public class EqualsTest {
	public static void main(String[] args) {
		
	User u1 = new User("짱구", 20);
	User u2 = new User("짱구", 20);
	User u3 = new User("짱구", 20);
	
	System.out.println(u1);
	System.out.println(u2);
	System.out.println(u3);
//	ObjectTest02.User@279f2327
//	ObjectTest02.User@2ff4acd0
//	ObjectTest02.User@54bedef2
	
//	equals()가 오버라이딩 되어있지 않을 때 참조값으로 비교한다	
	//equals()가 오버라이딩 되어있지 않을 때
//	System.out.println(u1 == u2); //	false
//	System.out.println(u1 == u3); //	false
//	System.out.println(u1.equals(u2)); //	false
//	System.out.println(u1.equals(u3)); //	false
	
//	만약 같은 이름이 같은 객체라면 equals () 메소드를 재정의해줘야한다
//	재정의 이후
	System.out.println(u1 == u2); //	false
	System.out.println(u1 == u3); //	false
	System.out.println(u1.equals(u2)); //	true
	System.out.println(u1.equals(u3)); //	true

//	해쉬코드 출력, hashCode도 재정의를 안하면 값이 따로 나온다
	System.out.println(u1.hashCode());
//	1044036744
//	재정의(return this.age) 후 : 20
	System.out.println(u3.hashCode());
//	1826771953
//	재정의(return this.age) 후 : 20
	}
}


=======================================================================

package WrapperTest;
// 5번 : wrapper 클래스 (boxing과  unboxing)
public class WrapperTest {
	public static void main(String[] args) {
		//boxing : 기본자료형 -> wrapper 클래스
		int num1 = 10;
		System.out.println(num1);
		
		//boxing
//		예전방법
//		Integer number = new Integer(num1); //예전방법
		
//		최근방법
		Integer number = Integer.valueOf(10);
		System.out.println(number);
		System.out.println(number.toString());
		
		//unboxing : wrapper 클래스 -> 기본 자료형
		int unNum1 = number.intValue();
				System.out.println(unNum1);
		
		
		//AutoBoxing
		double num2 = 1.1; //기본자료형
		Double dNum = num2; //자동으로 boxing
		System.out.println(dNum);
		System.out.println(num2);
				
				
		//AutoUnBoxing
		double unNum2 = dNum; //unboxing
			System.out.println(unNum2);
		
		
	}
}


=======================================================================

package WrapperTest;
// 6번 : wrapper 클래스
public class WrapperTest02 {
	public static void main(String[] args) {
		
		int num = 10;
		printObj(num);
		//본래는 자동박싱과 언박싱이 진행되므로 ()안에 작성이 불가함
		Object obj = num; //Integer
		Object obj2 = 10;
		System.out.println(obj2);

	}
	static void printObj(Object obj) {
		System.out.println(obj);
	}

}


=======================================================================

package WrapperTest;
// 7번 : String 메소드
public class StringTest {
	public static void main(String[] args) {
		String msg1 = "안녕하세요";
		
		//charAt()
		System.out.println(msg1.charAt(0));
		
		
//		System.out.println(msg1.charAt(5));
//		java.lang.StringIndexOutOfBoundsException < 예외발생
//      int[] num = {1, 2, 3, 4, 5};
//      System.out.println(num[5]);
//      java.lang.ArrayIndexOutOfBoundsException
		
		
//		indexOf()
		System.out.println(msg1.indexOf("안"));
		System.out.println(msg1.indexOf("h"));
		
		
//		split()
		String msg2 = "안!녕!하!세!요!";
		System.out.println(msg2);
		
		System.out.println(msg2.split("!")); //배열을 돌려줌
		String[] ar = msg2.split("!");
		System.out.println(ar[0]);
		System.out.println(ar[1]);
		System.out.println(ar[2]);
		
		for(String str : ar) {
			System.out.print(str);
		}
		
		//length()
		System.out.println("\n" + msg2.length());
		
		//strip()
		String msg3 = "         안녕하세요!! !!       ";
		System.out.println(msg3);
		System.out.println(msg3.strip()); //문자열 기준 앞뒤 공백 제거
		
		//substring()
		System.out.println(msg3.length());
		System.out.println(msg3.strip());
		System.out.println(msg3.strip().substring(3, 7));
		
		//contains() : 해당 문자열이 포함되어있는지 여부를 true, false로 반환
		System.out.println(msg3.contains("하"));
		System.out.println(msg3.contains("하하하"));
	}
}


=======================================================================

package listTetst;

import java.util.ArrayList;

// 8번 : ArrayList와 제네릭
public class ArrayListTest01 {
	public static void main(String[] args) {

		ArrayList al = new ArrayList();
		System.out.println(al); // []
		System.out.println(al.toString()); // []

		// 요소 추가 메소드 add
//		al.add(al);	// 객체 자기 자신을 추가하면 (this Collection)이 나온다
		al.add(2);
		al.add("1");
		al.add(0.5);
		al.add(true);
		System.out.println(al); // [(this Collection)]

		// 요소 길이 확인 메소드 size
		// 배열 length; <배열은 상수라 메소드()가 안붙는다!
		// 문자열 length()

		System.out.println(al.size()); //[2, 1, 0.5, true]
//		System.out.println(al.length()); <<

		// ArrayList의 크기를 반복하여 요소 출력
		// 요소를 가져오는 메소드 get(index)
		for (int i = 0; i < al.size(); i++) {
			System.out.println(i + " : " + al.get(i));
		}

		// <Element> : 제네릭
//		ArrayList<int> al2 = new ArrayList<>();
		ArrayList<Integer> al2 = new ArrayList<>(); // <>안은 정수형만 가능!
//		al2.add(1); //auto boxing

		// 반복문을 이용하여 10 ~ 1 순서대로 값 추가
		// 1) for문 초기식 int i = 0; 조건식 i < 10; 증감식 i++
		// 2) ArrayList 객체 al2.add(10 - i); 10부터 감소
		// 3) 반복문 밖에서 출력
		for (int i = 0; i < 10; i++) {
			al2.add(10 - i);
		}
		System.out.println(al2);
		
		//값 가져오기 : index 번호로 특정 값 가져오기 .get(idx)
		System.out.println(al.get(0));
		
		//삭제 : index번호로 삭제하고 삭제한 요소를 반환 .remove(int)
		System.out.println("인덱스 1의 값 " + al2.remove(1) + "을 삭제했습니다");
		System.out.println(al2);
		
		
		//삭제 : 값으로 검색하여 삭제(Object), 삭제 성공 여부를 반환 .remove(Object)
		System.out.println("값 삭제 여부 : " + al2.remove(Integer.valueOf(50)));
		System.out.println("값 삭제 여부 : " + al2.remove(Integer.valueOf(5)));
		System.out.println(al2);
		
		
		//수정 : 수정전의 값을 반환 set(idx, element)
		System.out.println(al2.set(2, 100));
//		2번째 인덱스의 값을 100으로 수정하여 반환한다
		System.out.println(al2);
	}
}


=======================================================================

package setTest;

import java.util.HashSet;
import java.util.Iterator;

public class HashSetTest01 {
	public static void main(String[] args) {

		HashSet<String> animalSet = new HashSet<>();

		animalSet.add("하마");
		animalSet.add("코알라");
		animalSet.add("치타");
		animalSet.add("호랑이");
		animalSet.add("기린");
		animalSet.add("하마");
		animalSet.add("하마");
		animalSet.add("하마"); // 중복값은 출력하지 않음
		System.out.println(animalSet); // 중복값을 제외하고 출력
		System.out.println(animalSet.toString());

		// Iterator : 반복자
		Iterator<String> animalIter = animalSet.iterator();
		System.out.println(animalIter);

		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.hasNext()); 무한반복으로 true 출력
//		System.out.println(animalIter.next());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.next());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.next());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.next());
//		System.out.println(animalIter.hasNext());
//		System.out.println(animalIter.next());
//		System.out.println(animalIter.hasNext()); //false
//		System.out.println(animalIter.next()); //예외발생
		while (animalIter.hasNext()) {
			// false면 더이상 hasNext에 못들어가니 탈출
			System.out.println(animalIter.next());
		}

	}
}


=======================================================================

package setTest;
import java.util.ArrayList;
import java.util.Collections;
// 로또뽑기 메소드 생성(로또는 6개 뽑음)
import java.util.HashSet;
import java.util.Random;

public class LottoSet {
	public static void main(String[] args) {
		printLotto(5);
		
	}
	
	static void printLotto(int num) {
		Random r = new Random();
		HashSet<Integer> lottoNum = new HashSet<>();
		ArrayList<Integer> result = null;
		
		for(int i = 0; i < num; i++) {
			while(lottoNum.size() < 7) { //lottoNum을 지정할때 Set 추가,
				lottoNum.add(r.nextInt(45) + 1); //Set이므로 중복무시
			}
		}
		result = new ArrayList<>(lottoNum);
		Collections.sort(result); //result보다 Collections가 먼저 올라가면 null값이라 오류발생
		System.out.println(result);
//		System.out.println(lottoNum);
	}
	
}

=======================================================================

package setTest;

import java.util.HashSet;
import java.util.Random;

public class LottoSet02 {
   public static void main(String[] args) {
//      Random r = new Random();
//      System.out.println(r.nextInt(10) + 1);
      printLotto(5);
      
   }
   
   static void printLotto(int num) {
      Random r = new Random();
      HashSet<Integer> lottoNum = new HashSet<>();
//      ArrayList<Integer> lottoNum = new ArrayList<>();
      for(int i = 0; i < num; i++) {
          while(lottoNum.size() < 7) {
             lottoNum.add(r.nextInt(45) + 1);
          }
       }
       System.out.println(lottoNum);
    }
 }


=======================================================================



=======================================================================



=======================================================================

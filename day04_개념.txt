0. 복습

컴퓨터 = 하드웨어 + 운영체제(os) + 소프트웨어
컴퓨터 언어 : 저급언어, 고급언어
저급언어 : 컴퓨터가 알기 쉬운 언어
고급언어 : 사람이 알기 쉬운 언어

사람과 컴퓨터가 소통하기 위한 한줄씩 번역 프로그램 : 컴파일러(자바에서 번역해주는 프로그램, 
 jdk 설치시 'bin' 파일 안에 자동으로 설치됐음)
파이썬 같은 동시번역 프로그램 : 인터프리터 

.java 파일 ---------------> .class -----------> 실행결과
	   javac.exe	   	   java.exe
       (class 파일명 그대로)	   


자바파일 생성 순서
java 프로젝트 -> 패키지 -> 클래스 -> main 메소드

jvm, jre, jdk
- JVM(Java Virtual Machine)
       운영체제 상관없이 실행가능
       코드 변환 필요 x
      운영체제 맞춰서 java로 만든 프로그램 실행시켜준다

- JRE(Java Runtime Enviromnet)
      JVM을 실행한다
      JVM을 실행할 때 필요한 라이브러리 파일 등을 가지고 있다

- JDK(Java Development Kit)
      JRE를 포함한다
      JRE 외에 개발에 필요한 도구들을 가지고 있다

단축키(이클립스)
	ctrl + n 프로젝트, 패키지, 클래스 생성 (단축키 입력후에 파일명 작성)
	alt + v, 클래스 파일의 {}영역 안에서 main + ctrl + space bar 엔터:메인 메소드 생성
	syso + ctrl + space bar :  출력 메소드 생성
	ctrl + F11 : 실행
	ctrl + s : 저장
	ctrl + alt + 방향키 위, 아래 : 라인 한 줄 복사
	alt + 방향키 위, 아래 : 라인 한 줄 이동
	F2 : 파일명, 패키지명, 프로젝트명 변경
	ctrl + shift + f : 자동 정렬

용어 정리
- 자바프로젝트
	하나의 프로그램 단위
	프로그램을 구성하는 모든 것들을 모아둔 폴더

- 패키지
	소스 파일들의 묶음 단위
	프로젝트의 하위 폴더

- 소스파일
	.java로 끝나는 파일이며 소스코드가 작성된다
	이클립스에서는 클래스를 생성하면 자동으로 클래스와 같은 이름으로 소스파일을 생성해준다

- 클래스
	자바에서 모든 코드를 작성하는 파일 / 자바에서 모든 코드는 클래스 내부에서 작성된다.
	클래스 이름의 첫글자는 무조건 대문자로 작성해야한다.

- 중괄호{}
	자바에서는 중괄호로 영역을 표시한다.

- 메소드(하나의 기능, 어떠한 기능이 들어가느냐에 따라서 기능이 달라짐)
	이름뒤에 소괄호()가 있는 대부분의 명령어는 메소드이다.
	키워드 뒤에 ()가 있는 명령어는 메소드가 아니다(ex : for(){}) < 반복문
	하나의 기능만 가능하고, 메소드 명령어 뒤에 어떤 단어가 붙어있는지를 확인해야한다.

- 메인 메소드
	자바프로그램이 실행되면 메인 메소드의 코드가 실행된다
	프로그램이 시작되는 시작점(entry point)

- 출력 메소드
	System.out.println("강승훈")
		   (print 뒤에 ()가 왔으니 메소드)(뒤에 ()가 있는데도 글씨 색이 안바뀌면 메소드임)
	콘솔창에 소괄호 안에 있는 것(값)을 출력한다
	
- 콘솔창
	입력과 출력이 가능한 창
	컴퓨터와 개발자가 의사소통할 수 있는 창
	개발자가 제대로 된 코드를 작성했는지 확인하기 위해서 사용한다
	
- .(닷 연산자, 하위 연산자)
	.
	~안에 라고 해석한다

- 세미콜론;
	자바에서 문장의 끝은 ;로 표시한다

- 들여쓰기
	자바에서는 들여쓰기가 코드에 영향을 끼치지 않는다
	가독성을 높히기 위해 사용한다

-주석
	코드에 영향을 끼치지 않는다
	내가 쓴 코드를 다른 사람에게 설명하기 위한 설명글 작성용
	잠시 일부 코드를 제외하고 실행시켜야할때 사용하기도 한다
	자바를 배우는동안 주석을 통해 코드해석, 로직구성을 필수로 진행한다!
	한 줄 주석 //, 범위 주석 /**/, api주석 /** */(주석의 색깔이 달라짐)
	한줄주석을 제일 자주 사용하게 될거고, api주석은 뒷부분에서 배울 예정 


이클립스
패키지 생성시에 한글로도 만드는게 가능하긴하나, 개발에는 영어로만 사용함
(한글로 작성한다고 오류가 생기진 않음.)
(패키지 명은 f2로 바꿀 수 있음)

코드 해석을 할 때는 {}를 잘 확인해야함

실행 시 에러가 발생하면 빨간 밑줄이 그이고 어떤 부분이 에러가 난건지 확인가능.
()안에 숫자를 적을때 그냥 1만 적고 실행하면 그대로 1이 출력됨
()안에 숫자를 적을때 그냥 1 + 1로 적고 실행하면 2로 결과가 출력됨
()안에 숫자를 적을떄 ""안에 1+1로 적고 "1 + 1" 실행하면 1 + 1 그대로 출력됨.

소숫점이 없으면 정수(1)
소숫점이 있으면 실수(0.0)
앞에 -가 붙으면 음수(-3.14)

1. 자료형(Type) : 값의 종류
	자료형	type	byte	값의 의미				예시
	정수형	int	4	양의 정수, 음의 정수, 0		2, -15, -5555, 0, ....
		long	8	양의 정수, 음의 정수, 0		2L, -15l, 0L, ....
				(L을 적을때 소문자 대문자 구분없이 사용가능하나 소문자는 1과 헷갈릴 수 있으므로 대문자를 쓸것)
	실수형 	double	8	소숫점이 있는 수			3.14, 5.1, -66.34, 0.0, ...
		float	4	소숫점이 있는 수			3.14f, -5.1f, 0.0f, ...
				(float는 뒤에 f를 붙여서 적음으로써 구분함)
	논리형	boolean	1	참, 거짓				true, false
	문자형	char	2	문자 1개('')			'a', 'A', '가', '0', ...
	문자열	String	?	문자들의 나열("")			"a", "A", "강승훈" , "2025년 6월 16일", ...
		(s는 무조건 대문자)(바이트는 정해진게 없음)(내부에 문자와 숫자를 띄워쓰기를 포함하여 같이 작성가능!)
		
bit(비트)
	컴퓨터가 처리할 수 있는 최소의 데이터 단위
	0과 1로만 이루어짐!		(ex: 10이라는 값을 비트로 표현하려면 10이 아니라, 8개 묶어서 byte로 표현함)

byte(바이트)
	bit 8개를 묶어서 1byte (실생활에서 mm단위가 아닌 cm단위를 쓰는것과 동일, bit는 너무 단위가 작음)
	ㅁㅁㅁㅁㅁㅁㅁㅁ < ㅁ 하나가 bit, ㅁ 8개가 모인게 byte

문자
	작은 따옴표로 감싸진 1개의 문자

문자열
	문자들의 나열
	큰 따옴표("")로 감싸진 0개 이상의 문자 (("")도 안에 아무것도 없지만 문자열로 취급함!)

2. 변수(Variable)
	어떤 값을 저장하기 위한 저장 공간 (ex: 10이라는 값을 저장할때 그대로 저장하면 꺼낼때 이해하기 힘듦,변수로 숫자 확인 라벨을 붙혀두는것)
	변수는 하나의 저장 공간에 하나의 값만 저장할 수 있음, 하나의 자료형으로만 만들어야함

1) 변수의 특징
	변수는 오직 하나의 자료형만 저장할 수 있다
	변수는 오직 하나의 값만 저장할 수 있다
	
	=> 하나의 자료형과 하나의 값만 저장할 수 있는 저장공간 = 변수

2) 변수의 선언(변수를 만든다)과 사용
	변수의 선언(만든다)
		자료형 변수명;
		int number; > int 안에 number라는 변수를 만듦
		boolean itTrue; > boolean 저장공간 안의 값은 true다
		char alpha; > alpha 라는 문자형 생성

	변수에 값을 저장
		변수명 = 값;
		number = 100; > 100이라는 연산자를 만든다(=은 같다의 표시가 아님!)(대입연산자 기준 =은 오른쪽의 값을 왼쪽에 저장한다 라는 뜻)
		isTrue = true 
		alpha = 'a';


		=(대입연산자)	오른쪽의 값을 왼쪽의 저장공간에 저장한다/대입한다

------------------------------------------------------------------------------	
변수 값을 처음으로 넣는다 = 초기화


	변수 선언과 동시에 초기화
		자료형 변수명 = 값;
		int number = 100;
	
int num4, num5, num6; //정수형변수 num4, num5, num6를 선언
		num4 = 1;
		num5 = 2;
		num6 = 3;
		System.out.println(num4);
		System.out.println(num5);
		System.out.println(num6);

같은 자료형일 경우 한줄로 변수 초기화가 가능하다 = 동시에 대입이 가능하다 
------------------------------------------------------------------------------
	변수에 저장된 값을 사용하는 방법
		변수명을 이용한다
		
	
	여러개의 변수를 선언하는 방법
		자료형 변수명1, 변수명2, 변수명3
		자료형 변수명1 = 값, 변수명2 = 값, 변수명3 = 값;
		*단, 자료형은 반드시 같아야만 한다!!

3) 변수 선언 시 주의사항
		같은 영역에서(중괄호 안) 같은 이름의 변수는 선언할 수 없다
		변수명을 만들때는 되도록 소스코드 위쪽에 한꺼번에 선언한다
		되도록 선언과 동시에 초기화를 진행한다
		(어떤 값으로 초기화 해야할 지 모를때 
		정수형 0, 실수형 0.0, 문자열 "", 문자형 ' '(한칸 띄워쓰기), 논리형 false)

4) 변수명 주의사항
	문자부터 시작한다(숫자부터 시작X)
	특수기호를 사용할 수 없다(단, _와 $만 사용 가능하다)
	공백을 사용할 수 없다(카멜표기법, 스네이크 표기법 등을 활용한다)
	키워드(예약어, 이미 자바에서 사용되는 명령어)는 사용할 수 없다
	되도록 소문자로 시작한다(자바에서는 대소문자를 구분하기 때문)
	되도록 의미있는 단어, 문자를 사용한다 (a, b, c, d 같은것)
	되도록 한글은 사용하지 않는다
	
-----------------------------------------------------------------
		String userName = "강승훈";
//		첫 단어는 소문자로 시작, 단어가 바뀔때 첫 문자를 대문자로 작성(=카멜 표기법, 자바의 기본 표기법,
//		변수명/메소드 작성시 사용함)
		String user_name = "강승훈";
//		첫 단어 소문자로 시작, 단어가 바뀔 때 언더바_로 연결해서 작성(스네이크 표기법, 상수 작성시 사용)
		String UserName = "강승훈";
//		첫 단어의 첫 문자를 대문자로 시작, 나머지는 소문자로 사용. 단어가 바뀔 때 첫 문자를 대문자로 작성(파스칼 표기법, 		class명 작성시 사용)
-----------------------------------------------------------------

3. 상수(constant)(항상 상 자를 사용하여 항상 똑같은, 변하지 않는 값을 의미)
	한 번 값이 지정되면 변경할 수 없는 데이터를 의미한다.
	final 키워드를 사용하여 상수를 선언한다

1) 상수 선언
	자료형 변수명 = 값; //변수 선언(카멜 표기법)
	final 자료형 상수명 = 값; //상수 선언, final 값은 변경 불가능!!
	상수명은 대문자로 작성하고 단어가 바뀔 때는 _로 연결한다(스네이크 표기법)
	 
2) 상수 사용시 주의사항
	- 이름 작성 규칙(변수명)
	- 초기화 필수! : final키워드를 사용 시 선언과 동시에 초기화해야한다(변경불가능한 값이기에 선언이 필수임)
	- 불변성 : 한 번 값이 지정되면 변경할 수 없으므로 값을 유지해야할 때 주로 사용한다.
	

4. 변수를 사용하는 이유(값을 왜 변수에 저장해서 사용하는가?)
	**반복되는 값들을 쉽게 관리하기 위해서 변수를 사용함(값을 재사용하기 위함)
	**의미없는 값들에 의미를 부여히기 위해서 사용됨(값에 이름을 붙혀줌)
	프로그램의 가독성, 유지보수성(타인이 수정할 수 있게끔), 재사용성을 높히기 위해서 사용함

5. 메모리 영역	(JVM이 관리하는 메모리 영역임)
	java에서는 메모리 영역을 JVM이 할당받아서 사용함.(컴파일도 해줌)

	프로그램		JAVA 프로그램
	프로그램(SW)	프로그램
			JVM
	OS		OS
	HW		HW

----------
RAM (RAM 아래에 3개의 영역)
----------
Stack
Heap
Method

RAM (Random Acces Memory)(정확한 메모리값을 몰라도 변수값만 알고있다면 사용가능!)
	int num;(메모리 영역 어딘가에 num이라는 공간이 만들어짐)
	num = 10;(num 영역이 10으로 저장됨)
	num이라는 이름의 저장공간이 RAM에 할당된다

RAM 영역을 num이라는 변수가 통짜로 쓸 수는 없으니, int로 4byte 만큼만 쓰겠다 라고 나눔.
int안의 메모리 주솟값을 num으로 지정해서 해당 공간만 사용.

주소값
	메모리(RAM)에 저장공간이 할당되면 고유한 값인 주소값이 부여된다

<쉽게 비유>
	RAM : 작업 도구를 올려두는 책상(최상위 공간)
		프로그램이 실행되는 동안 데이터를 저장하고 사용하는 공간
	변수 : 책상 위에 올려둔 상자
		데이터를 저장하기 위해 RAM에 만든 이름이 붙은 공간
	주소값 : 해당 상자의 위치
		컴퓨터가 RAM에서 변수를 찾을 때 사용하는 고유한 번호

	컴퓨터는 number의 주소값을 보고 RAM에서 데이터를 읽어온다
		주소값에 있는 데이터를 출력한다.


6. 제어문자(Escape Character / Sequence)
	따옴표 안에서 사용되며 미리 예약된 특수한 기능을 하는 문자들을 의미
	\(백슬래쉬, 역슬래쉬)를 사용한다

	\n : 줄바꿈
	\t : 일정 간격을 띄워준다(tab)
	\" : 문자열안에서 큰따옴표를 표현
	\' : 문자열안에서 작은 따옴표를 표현
	\\ : 문자열안에서 역슬래쉬를 표현

7. 출력 메소드(메소드 : 어떠한 기능을 한다 라는 의미)
	소괄호 안에 있는 값을 콘솔창에 출력한다.
	
	println() < 얘만 줄바꿈이 됨
		소괄호 안에 있는 값을 출력하고 줄바꿈이 된다
	print()
		소괄호 안에 있는 값을 출력하고 줄바꿈이 되지 않는다
	printf()
		형식(서식 format)에 맞는 값을 출력하고 줄바꿈이 되지 않는다	

1) 출력 메소드의 목적
	개발자가 오류를 해결하기 위해 값을 확인할 때 사용한다

2) 형식 지정자
	printf()	형식지정자를 사용하여 데이터를 특정 형식으로 출력할 수 있다
			줄바꿈은 자동으로 이루어지지 않으며 필요하면 \n(escape 문자)를 추가해서 사용한다
	
	출력 형식을 지정한다
	%로 시작하며 printf()에서만 사용이 가능하다
	반드시 따옴표 안에서 작성한다 ,(콤마) 뒤에 나오는 값이 형식 지정자의 위치로 대입된다(들어가게된다)

	자료형	형식지정자		의미
	int	%d		decimal(10진수 정수)(0~9)
		%o		octal(8진수 정수)(0~7)
		%x		haxahecimal(16진수 정수)(0~9,A(10)~F(15))
	double	%f		float(실수)
	char	%c		character(문자)
	String	%s		String(문자열)
	boolean			true, false / %s 안에 넣을 수 있음

3) 서식문자의 옵션
	%[- or 0][n][.m]서식문자(d,o,x,f,c,s)

	-	왼쪽 정렬
	0	비어있는 공간을 0으로 채움(int, double 만 가능!)
	n	자리수	
	.m	소수점 아래 자리수 / 문자열 자르기


8. 형변환(Type Casting)
1) 자동형변환(Implict Casting)
	자바 컴파일러가 자동으로 수행하는 형변환

	작은 byte의 값을 큰 byte의 변수에 저장하면 자동으로 형 변환된다
	정수 + 정수 = 정수
	정수 + 실수 = 실수 (정수 10 + 실수 10.5 = 20.5, 자동으로 실수 변환)
	문자는 정수로 자동 형변환이 된다
	
2) 강제형변환
	큰 타입을 작은 타입으로 개발자가 명시적으로 변환하는 형변환
	데이터 손실이 발생할 수 있기 때문에 캐스팅 연산자를 사용
	
	(자료형)값

유니코드는 아스키코드를 내부에 담고있음
유니코드 : 전세계 문자를 컴퓨터 문자로 바꿔둔것
(자세한건 노션 day4 확인할것)


+) Java의 기본 자료형
	정수형	int		4byte	
		long		8byte
	실수형	double		8byte
		float		4byte
	논리형	boolean		1byte(1bit지만 기본 바이트로 사용)
	문자형	char		2byte
	문자열	String		?(정해진거 없음)
	
	
+) 숫자형 자동 변환 
	byte -> short -> int -> long -> float -> double
			↑
			char

	char과 int는 유니코드 숫자로 변환(자동형변환 가능)


+) 형변환 가능성(호환성)
byte b = 10; //정수
		short s = 100; //정수
		char c = 'a'; //97
		int i = 1000; //정수
		long l = 10000L; //정수
		float f = 3.14f; //실수
		double d = 3.141592; //
		boolean bool = true;


	byte	short	char	int	long	float	double	boolean
byte	O	O	X	O	O	O	O	X
short	X	O	X	O	O	O	O	X
char	X	X	O	O	O	O	O	X
int	X	X	X	O	O	O	O	X
long	X	X	X	X	O	O	O	X
float	X	X	X	X	X	O	O	X
double	X	X	X	X	X	X	O	X
boolean	X	X	X	X	X	X	X	O


byte b = 10;
char ch = b; x (char byte는 불가능)
int i2 = (int)true; x (boolean값은 boolean끼리만 가능)


================================================================================================
복습
1) 자료형
	정수형
		int 	4byte
		long 	8byte
	실수형
		double 	8byte	15자리
		float 	4byte	6자리
	논리형
		boolean	1byte
	문자형
		char	2byte	''로 감싸진 문자1개
	문자열
		String	?	""로 감싸진 문자0개 이상

2) 변수
	값을 저장하기 위한 저장 공간
	자료형 변수명 
	변수명 = 값; < 해당 변수의 값만 바꿔서 사용가능

	자료형 변수명 = 값; < 변수 선언 & 초기화

3) 상수
	변하지 않는 값을 저장하기 위한 저장 공간	
	final	자료명	상수명;
	
	
4) 이스케이프 문자
	문자열 안에서 \로 표현한다
	\n, \t, \', \", \\

5) 출력 메소드
	println() : 소괄호 안에 있는 값을 콘솔에 출력하고 줄바꿈이 된다
	print() : 소괄호 안에 있는 값을 콘솔에 출력하고 줄바꿈이 안된다
	printf() : 소괄호 안에 형식에 맞는 값을 출력하고 줄바꿈이 되지 않는다

- 형식지정자
	%[- or 0][n][.m]서식문자
	%d
	%o
	%x
	%f
	%c
	%s < true,false도 포함
	%.1s : 문자열에서 맨 앞 1자리만 잘라서 보여준다


6) 형변환
- 자동형변환
	작은 바이트의 값을 큰 바이트의 저장공간에 담을 때 
	정수 + 실수 = 실수
	char는 자동 정수형으로 변환
- 강제형변환
	(자료형) 값























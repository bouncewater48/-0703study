day23 (dbms 5일차) 개념
복습 -> 이상현상(연산이상) -> 정규화 -> DML2 -> GROUP BY -> JOIN -> SUB QUERY

0. 복습
1) 데이터의 무결성
	정확성 : 데이터는 애매하지 않아야한다
	일관성 : 각 사용자가 일관된 데이터를 볼 수 있도록 해야한다
	무결성 : 데이터가 실제로 존재하는 데이터여야한다

2) 무결성의 종류
	개체 무결성 : 모든 테이블이 기본키(Primary Key)를 가져야한다
	참조 무결성 : 두 테이블의 데이터가 항상 일관된 값을 갖도록 유지하는 것
	도메인 무결성 : 컬럼의 타입, NULL 허용 등의 사항을 정의하고 올바른 데이터가
		입력되어있는지 확인하는 것

3) 키(Key)
	데이터베이스 내의 레코드를 고유하게 식별하거나 검색하는데 사용되는
		 하나 이상의 속성의 조합
	- 모델링에서의 사용(식별자)
		: 주식별자, 외래식별자, 후보키, 대체키, 슈퍼키
	- 테이블에서 사용(키)
		: 기본키, 외래키, 조합키
	
4) 키의 종류
- 기본키(Primary Key)
	테이블 내의 각 행을 고유하게 식별하는데 사용
	중복 불가, NULL값 불가

- 외래키(Foreign Key)
	두 테이블 간의 관계를 설정하고 데이터 무결성을 유지

- 조합키(복합키)
	두 개 이상의 컬럼을 하나의 key로 지정하는 것
	모든 테이블은 하나의 PK만 존재하지만 조합키를 사용하여 두 개 이상의 컬럼을
		하나의 PK로 사용할 수 있다

- 후보키(Candidate Key)
	기본키가 될 수 있는 키(기본키의 후보키)

- 대체키(Alternate Key)
	후보키에서 기본키로 선택되지 않은 후보키

- 슈퍼키(Super Key)
	레코드를 고유하게 식별하기 위한 속성 또는 속성의 조합
	슈퍼키는 후보키와 대체키의 상위 키

5) 제약조건
- Primary Key(PK)
	고유한 값이며 각 행의 구분점으로 사용된다
	중복 불가, NULL 값 불가

- Foreign Key(FK)
	다른 테이블의 PK를 사용하며 중복이 가능하다
	보통 테이블끼리 관계를 맺을 때 사용한다(참조무결성)
	중복 허용, NULL 값 허용

- UNUQUE(UK)
	해당 컬럼에서 중복값이 없는 고유값으로 사용해야한다
	중복 허용, NULL 값 허용

- CHECK(CHK)
	컬럼의 값이 특정 조건을 만족해야한다(값의 범위나 조건 사용)

- NOT NULL(NN, N/N)
	해당 컬럼의 값은 NULL 값 허용하지 않는다

- DEFAULT
	해당 컬럼의 값이 입력되지 않을 경우, 기본값이 자동 입력된다
	지정하지 않을 경우 NULL이 자동으로 사용된다

6) 모델링
	현실세계의 복잡한 상황이나 현상을 일정한 형식으로 명확하게 표현하기 위하여 
		추상화(Abstraction)를 통하여 단순화 하는 과정
	현실세계 --- 모델링 ---> 모델(model)
		   단순화
		   추상화(형상화)
		   명료화	
	
- 모델링은 단순화를 목적으로 한다 : 복잡한 현실세계 현상을 이해하기 쉽게 요약해서 표현하는 기법
- 모델링은 명료화를 목적으로 한다 : 복잡한 현실세계 현상을 누구나 이해하기 쉽게 
				애매모호함을 제거하고 분명하고 또렷하게 표현하는 기법
- 모델링은 추상화를 목적으로 한다 : 복잡한 현실세계의 현상을 이해하기 쉽게 설명하기 위해 중요한 특징을
				찾아내어 구체적인 모양과 모습으로 형상화 하는 기법


	모델링 행위는 모델링 대상의 엔티티와 모델링을 수행하는 주체(subject)로 구분할 수 있다
		엔티티 : 사람들의 관심이 되는 것, 업무에 꼭 필요로 하는 것들을 의미
			유형(현실세계 정보), 무형(데이터로만 존재하는 정보) 정보가 모두 포함됨
		모델링 주체 : 모델링의 수행하는 사람 모델러(modeller)

		속성 : 엔티티에서 관리해야 할 최소 단위의 정보 항목
		엔티티는 하나 이상의 속성을 포함함
		릴레이션 : 튜플과 속성이 포함된 정보

7) 모델링 단계
	요구사항분석
	개념적모델링	엔티티를 사람이 이해할 수 있는 개념 세계의 정보 구조로 추상화하는 단계
	논리적모델링	실질적인 데이터 모델링에 해당함
			개념세계의 정보 구조를 정보시스템이 이해할 수 있는 형태로 표현하는 단계
	물리학모델링	정보시스템 세계의 논리적 구조를 정보시스템이 처리할 수 있는 형태로 구조화하는 단계
			구조화된 결과는 데이터 스키마로 표현됨
	구현		

+) DDL, DML
DDL	데이터 정의어
	DROP	DROP TABLE 테이블명;
	CREATE	CREATE TABLE 테이블명(
			컬럼명 자료형(용량),
			제약조건
		);
	ALTER	ALTER TABLE 테이블명
			테이블명수정	RENAME TO 새로운태이블명;
			컬럼명수정		RENAME COLUMN 기존컬럼명 TO 새로운컬럼명;
			컬럼추가		ADD (새로운컬럼명 자료형(용량));
			타입수정		MODIFY (기존컬럼명 자료형(용량));
			컬럼삭제		DROP COLUMN 기존컬럼명;
			제약조건추가	
			ADD CONSTRAINT 제약조건이름 PRIMARY KEY(현재테이블의 컬럼명);
			ADD CONSTRAINT 제약조건이름 FOREIGN KEY(현재테이블의 컬럼명)
			    REFERENCES 상위테이블(컬럼명);
			제약조건삭제	DROP CONSTRAINT 제약조건이름;
	TRUNCATE	TRUNCATE TABLE 테이블명;

DML	데이터 조작어	
	INSERT		INESRT INTO 테이블명(컬럼명,...)
			VALUES (값1,...);  // NULL값이 아닌 DEFAULT값으로 채우고싶으면 이 방식 사용
			INSERT INTO 테이블명
			VALUES (값1, 값2);
	SELECT		SELECT [DISTINCT] 컬럼명 [AS 별칭]
			FROM 테이블명
			[WHERE 조건식]
			[ORDER BY 정렬할컬럼명 ASC / DESC];
	DELETE		DELETE FROM 테이블명
			[WHERE 조건식];
	UPDATE		UPDATE 테이블명
			SET 컬럼명 = 값
			[WHERE 조건식];


1. 이상현상
	DDL, DML 개념이 있어야한다
	테이블에 컬럼을 무엇을 넣어야할 지, 하나의 테이블을 두개로 분리할 지 고민하는 작업

	무결성의 특징 : 일관성, 유일성, 정확성을 지켜도 정규화를 하지 않으면 나중에 테이블간 문제가 발생할 수 있다
	1차~6차 정규화까지 분리하여 진행한다 보통은 3차까지만 진행을 한다

1) 데이터베이스에서 정규화가 필요한 이유
	데이터베이스를 잘못 설계하면 불필요한 데이터 중복으로 인해 공간이 낭비된다
	이러한 현상을 이상(Anomaly) 현상이라고 한다

2) 이상현상 
	데이터 베이스 설계가 잘못되어 발생하는 문제

 직원
 =======================================================================
 사원번호(pk)	이름	생년월일		부서정보			급여
 1		홍길동	2010-12-11	영업부, 서울시..12312	300
 2		강감찬	2011-02-04	개발부, 서울시..02322	240
 3		신짱구	2018-01-04	보안부, 서울시..01111	230
 4		신짱아	2009-05-09	영업부, 서울시..01234	220
 5		홍길동	2010-12-11	영업부, 서울시..12312	500


3) 이상현상의 종류
- 삽입이상(Insertion Anomaly)
	새로운 데이터를 삽입하기 위해 불필요한 데이터도 같이 삽입해야하는 문제
	새로운 부서를 추가하려고 할 때 해당 부서에 소속된 직원이 아직 없다면 삽입할 수 없음
	마케팅부, 서울시..02322	추가하려고할 때 소속된 직원이 없어서 추가하지 못하는 문제가 발생,
				다른 직원을 임의로 채워넣어야하는 문제

- 갱신이상(Update Anomaly)
	중복 행 중에서 일부만 변경하여 데이터가 불일치하는 모순의 문제
	영업부, 서울시 12312 같은 부서정보가 여러번 반복되어 저장됨
	이름이 같은 홍길동(사원번호 1, 5)가 있는데 동명이인인지, 중복인지 판단 불가(기본키만으로는 확인 불가)
	영업부, 서울시 12312와 영업부 01234 2개의 주소가 들어가 있으므로 어떤 주소가 맞는지 확인 불가

- 삭제이상(Deletion Anomaly)
	행을 삭제했을 때 필요한 데이터도 같이 삭제되는 문제
	특정 직원을 삭제하면 부서정보도 같이 삭제되는 문제가 발생
	다른 사람이 같은 부서에 없으면 정보 손실 발생

직원테이블
회원번호   이름   부서    프로젝트코드   급여   부서별_명수
1111   홍길동   개발팀   ABC0001   300    4
1111   홍길동   개발팀   DEF1112   200    4
1111   홍길동   개발팀   CBA9497   400    4
3333   이유리   기획팀   EFG0881   500    2
4444   박웅이   디자인팀  GHI9991   600    3

- 삽입이상
	담당 프로젝트가 정해지지 않은 사원이 있다면
		 프로젝트 코드에 NULL을 작성할 수 없으므로 테이블에 추가될 수 없다
	미정이라는 프로젝트 코드를 따로 만들어서 삽입해야한다

- 갱신이상
	한명의 사원은 반드시 하나의 부서에만 속할 수 있다
	만약 홍길동이라는 사원이 보안팀으로 부서를 옮길 시 3개 모두 갱신해주지 않는다면
		개발팀인지 보안팀인지 알 수 없는 문제가 발생한다

- 삭제이상
	박웅이 사원이 담당한 프로젝트를 박살내서 드랍(삭제)되면 박웅이 행을 모두 삭제해야한다
	프로젝트에서 드랍되면 모든 행의 정보를 드랍하게 된다

4) 함수적 종속
	이러한 이상현상을 예방하고자 정규화를 진행한다
	정규화를 진행하기 위해서 각 컬럼간의 관련성을 파악한다
	이 관련성을 함수적 종속성(Function Dependecy)이라고 한다
	따라서 하나의 테이블에서는 반드시 하나의 함수적 종속성만 존재하도록 정규화를 한다
	
	y = 2x라는 함수가 있을 때 x가 무엇이냐에 따라 y가 결정된다
	x를 결정자, y는 종속자 라고 표현한다
	이를 표현한게 x → y 이다 (교재 챕터 10 데이터베이스 설계 참고)
	x의 값이 1일 때 반드시 y는 2가 나온다
	이렇게 x값에 대한 y값이 항상 하나인 경우를 함수 종속이라고 한다

	생일을 알면 나이를 알 수 있다 => 나이컬럼은 생일컬럼에 함수 종속이다 < 라고 표현가능!

2. 정규화(Normalization)
	삽입/갱신/삭제 이상현상을 제거하기 위한 작업
	데이터의 중복을 최소화하는데 목적이 있다
	6차 정규화까지 있으나 3차 정규화까지만 진행한다

1차정규화(1NF-First Normal Form)
	테이블의 모든 컬럼의 값은 원자값(단일값)을 갖도록 분해하여 중복을 제거한다
	반복되는 그룹을 별도의 테이블로 분리해야한다
	= 하나의 컬럼에는 하나의 값만 들어가야한다!

------------------------------------------------------------------------

1차 정규화 전)
 직원
 =======================================================================
 사원번호(pk)	이름	생년월일		부서정보			급여
 1		홍길동	2010-12-11	영업부, 서울시..12312	300
 2		강감찬	2011-02-04	개발부, 서울시..02322	240
 3		신짱구	2018-01-04	보안부, 서울시..01111	230
 4		신짱아	2009-05-09	영업부, 서울시..01234	220
 5		홍길동	2010-12-11	영업부, 서울시..12312	500

------------------------------------------------------------------------

1차 정규화 후)
 직원
 =======================================================================
 사원번호(pk)	이름	생년월일		급여	부서주소
 1		홍길동	2010-12-11	300	
 2		강감찬	2011-02-04	240

 4		신짱아	2009-05-09	220
 5		홍길동	2010-12-11	500

 부서
 ======================================================================= 
 부서번호(pk)	부서명	부서주소
 100		영업부   서울시 강남구   12345	
 200		개발부   서울시 송파구   23455
 300		보안부   서울시 동작구   56789

------------------------------------------------------------------------

2차정규화
	1차정규화를 만족해야한다
	기본키가 복합키일 경우, 부분함수 종속 제거해야한다

	과자
	이름	맛	가격	제조사
	포카칩	기본맛	2200	오리온
	포카칩	어니언맛	2200	오리온
	포테토칩	오리지널	2300	농심
	포테토칩	어니언맛	2500	농심

	이름만 알아도 제조사를 알 수 있다 (포카칩 -> 오리온 / 포테토칩 -> 농심)
	조합키를 제외한 가격과 제조사 컬럼을 본다
	가격 컬럼은 이름, 맛 알아야함 확인할 수 있다
	제조사 컬럼은 이름 하나만 알아도 확인할 수 있다
	=> 조합키의 일부분에만 종속된다
	
	과자
	이름PK	맛PK	가격
	포카칩	기본맛	2200
	포카칩	어니언맛	2200
	포테토칩	오리지널	2300	농심
	포테토칩	어니언맛	2500	농심

 ------------------------------------

	제조사
	이름PK	제조사
	포카칩	오리온
	포테토칩	농심


 직원
 =======================================================================
 사원번호(pk)	이름	생년월일		급여	부서주소
 1		홍길동	2010-12-11	300	
 2		강감찬	2011-02-04	240

 4		신짱아	2009-05-09	220
 5		홍길동	2010-12-11	500

 부서
 ======================================================================= 
 부서번호(pk)	부서명	부서주소
 100		영업부   서울시 강남구      12345	
 200		개발부   서울시 송파구      23455
 300		보안부   서울시 동작구      56789

3차정규화
	이행적 함수를 제거하여 테이블을 분해(분리)한다
	다른 컬럼(비주요컬럼)이 기본키가 아닌 컬럼에 종속되는 경우
		 해당 컬럼들을 새로운 테이블로 분리하여 관계를 정리한다

	X → Y → A
	X → A

	회원번호PK		이름	시	구	동	우편번호
	1		홍길동	서울시	강남구	역삼동	12345
	2		춘향이	부산시	부산구	부산동	55555

        ------------------------------------------------------
	회원번호	이름	우편번호
	1	홍길동	12345
	2	춘향이	55555

	우편번호	시	구	동
	12345	서울시	강남구	역삼동
	55555	부산시	부산구	부산동


	직원
	=======================================================================
	사원번호(pk)	이름	생년월일		급여	부서주소
	1		홍길동	2010-12-11	300	
 	2		강감찬	2011-02-04	240

 	4		신짱아	2009-05-09	220
 	5		홍길동	2010-12-11	500

 	부서
 	======================================================================= 
 		부서번호(pk)	부서명	우편번호(fk)
 		100		영업부   서울시 강남구      12345	
 		200		개발부   서울시 송파구      23455
 		300		보안부   서울시 동작구      56789
	주소
	=======================================================================
		우편번호(pk)	   주소
		12345		서울시 강남구
		23455		서울시 송파구
		56789		서울시 동작구

3. DML2
1) 외래키와 참조 무결성
	외래키 : 다른 테이블의 기본키를 참조하는 키(컬럼)
	PK(기본키)를 가진 테이블 : 참조할 테이블(부모테이블)
	FK(외래키)를 가진 테이블 : 참조하는 테이블(자식테이블)
	- 부모 테이블의 기본키를 자식 테이블에서 외래키로 사용하는 것

	NULL값은 허용되지만 참조하는 테이블에 존재하지 않는 값은 허용되지 않는다(두 테이블에 존재하는 데이터가 동일하게 유지하는 참조 무결성)

2) CASCADE
	ON DELETE CASCADE : 부모 테이블에서 행(PK)을 삭제할 때 자식 테이블에서도 해당 PK를 참조하고 있는 행이 삭제된다
		ALTER TABLE 자식테이블 ADD CONSTRAINT FK_테이블명 FOREIGN KEY(해당테이블의 컬럼명) 
		REFERENCES 부모테이블명(부모테이블의 컬럼명) ON DELETE CASCADE;
	ex) 게시판의 게시글(부모)과 댓글(자식) 관계

	ON UPDATE CASCADE : 부모 테이블의 PK가 변경되면 참조하고 있는 자식 테이블의 FK값도 변경한다(오라클 사용 불가, MySQL 등 사용가능)
	ex) 부모 테이블의 PK가 자주 변경될 가능성이 있을 때 유용
	
	DROP TABLE 부모테이블 CASCADE CONSTRAINT; 부모테이블을 참조하는 제약조건과 부모 테이블을 같이 삭제할 수 있다
	- 참조 무결성을 강제로 무시하고 부모 테이블과 자식 테이블 간 관계를 강제로 종료할 때





















































































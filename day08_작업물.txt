day08

AtmTest.java
package review;
// 0번 : 복습 2번
import java.util.Scanner;

public class AtmTest {
	public static void main(String[] args) {
		
//		6. ATM 메뉴에서 입금, 출금, 잔액조회 하기
//		[조건]
//		초기 잔액은 10,000으로 설정
//		메뉴 선택에 따라 작업 수행
//		종료시 프로그램 종료
//		숫자(번호)로 입력받기
//
//		String msg = "\nATM 기기의 메뉴 중 번호를 선택하세요: "
//			+ "\n1. 잔액조회"
//			+ "\n2. 입금"
//			+ "\n3. 출금"
//			+ "\n4. 종료"
//			+ "\n선택 : ";
//		그 외의 번호 입력시 다시 선택하세요 출력 후 메뉴 보이기
//			
//		위에 String msg부터 "선택 : "; 까지 다 그냥 2번 출력용 메세지임
//		번호 입력시 해당 메시지만 출력하고 끝
		
		//1) 입력 클래스 import
		//2) 정수형 변수 choice,Money , 문자열 메시지(msg) 변수
		//3) 반복문(while문 true) < 언제 끝날지 모르니까 무한반복문 사용
		//	3-1) 입력메시지 출력
		//	3-2) choice 입력메소드 nextInt()
		//	4) switch문
		//	4-1) case 1
		//		4-1-1) 	잔액조회 출력
		//		4-1-2)	break;
		//	4-2) case 2
		//		4-2-1)	입금 출력
		//	4-3) case 3
		//		4-3-1)	출금 출력
		//	4-4) case 4
		//		4-4-1)	종료 출력
		//		4-4-2) sc.close();
		//		4-4-3)	return; < break가 아니라 프로그램을 완전히 멈추는 명령어
		//	4-5) default;
		//		4-5-1)	다시선택 출력
		//		4-5-2)	break;
		
		Scanner sc = new Scanner(System.in);
		String msg = "\nATM 기기의 메뉴 중 번호를 선택하세요: "
				+ "\n1. 잔액조회"
				+ "\n2. 입금"
				+ "\n3. 출금"
				+ "\n4. 종료"
				+ "\n선택 : ";
//		final int MONEY = 10000; <얘를 상수로 설정하면 나중에 입금/출금 후 잔액이 바뀌는걸 설정하지 못함, 이대로 고정된 상태
		int money = 10000, choice = 0;
		boolean isTrue = true;
		while (isTrue) {
			System.out.println(msg); //무한루트 입력
			choice = sc.nextInt(); //무한루트 멈추고 고정
			
			switch(choice) { 
			case 1:
				System.out.println("잔액조회 기능입니다.");
				break;//  중괄호에서 아예 탈출이 아니라 switch에서 다음으로만 넘어간다, 중괄호 탈출 아님!
			case 2:
				System.out.println("입금 기능입니다.");
				break;// 중괄호에서 아예 탈출이 아니라 switch에서 다음으로만 넘어간다, 중괄호 탈출 아님!
			case 3:
				System.out.println("출금 기능입니다.");
				break;// 중괄호에서 아예 탈출이 아니라 switch에서 다음으로만 넘어간다, 중괄호 탈출 아님!
			case 4:
				System.out.println("ATM 프로그램을 종료합니다.");
				sc.close();
				isTrue = false;
//				return; //main 종료 => 프로그램 완전히 종료
				break; // 제대로 된 탈출이 아니기에 오류 발생
					
				default:
					System.out.println("다시 선택하세요");
					break; // switch문의 끝을 의미
			}//switch 중괄호 끝
			System.out.println("while문 중괄호 영역 안");
		}//while문 중괄호 끝
		System.out.println(money); //while문 자체가 true로 작성되어있기에 안에서 false가 나올때까지 무한루프인데
		//이렇게 중괄호 밖으로 나갔으면 while문에 해당하지 않음
		//대신 boolean타입을 사용하면 "isTrue ="로 조건을 확인하고, false가 뜨면 자동으로 while문을 탈출하기에
		//while문 바깥의 메소드도 정상작동함
		System.out.println("while문 중괄호 영역 밖");
		
	}//main중괄호 영역
}

//switch라는 메소드 안에서 return이라는 명령어를 만나면 프로그램이 완전히 종료, return 아래에 적힌 모든 메소드는 실행조차 안되서 출력이 불가능해짐
//따라서 메소드 바깥의 메소드도 출력하고싶으면 break문을 사용해야하며, while(true)로만 사용하면 또
//true가 false로 바뀌게 됐을 경우 충돌이 일어나기에 바깥 메소드를 사용하지 못하게됨
//이때 boolean(isTrue)를 사용하면 isTrue가 false로 바뀌게 될 시 단순히 {}를 탈출하기만 하기에
//중괄호 영역 밖의 메소드도 출력이 정상적으로 이루어짐!                                                                                                      
===============================================================================================
Review01. java

package review;

import java.util.Scanner;

// 0. : 복습 1번
public class Review01 {
	public static void main(String[] args) {
		
		//0) 입력클래스 import
		Scanner sc = new Scanner(System.in);
		
//		1. 한 개의 정수를 입력받아 짝수인지 홀수인지 출력하기(삼항 연산자 이용)
// 		//아래에서 뭘 쓸지 모르므로 buffer 비우기가 필수
// 		//1) 입력 메시지 출력
// 		System.out.println("정수 1개를 입력하세요 : ");
// 		//2) 정수형 변수 선언 nextLine() 형변환
//		// nextLine()은 nextInt()와 다르게 매번 작성할 필요가 없다
// 		int num = Integer.parseInt(sc.nextLine());
//		//3) 출력 삼항연산자
// 		System.out.println(num + "은/는" + (num % 2 == 0 ? "짝수입니다" : "홀수입니다"));
// 											소괄호 한번 더 미작성시 string 오류가 뜨므로 () 필수
//	2. 한 개의 정수를 입력받아 양수, 음수, 0인지 출력하기
 			
  		//1) 입력 메시지 출력										
 		//2) 정수형 변수 1개 선언 입력메소드									
 		//3) 조건문(if~else if~else)
 		//	3-1) if (변수 > 0){
 		//	3-2)	 양수출력									
 		//	3-3) }else if (변수==0) {
 		//	3-4)	0 출력
 		//	3-5) }else{								
 		//	3-6)	음수 출력
 		//4)	}														
 											
// 		System.out.println("한 개의 정수를 입력하세요 : ");
// 		int num2 = sc.nextInt();
// 		 if(num2 > 0) {
// 	         System.out.println("양수");
// 	      }else if(num2 == 0) {
// 	         System.out.println("0");
// 	      }else {
// 	         System.out.println("음수");
// 	      }						
 																		
 											
//	3. 나이를 입력받아서 다음 기준으로 출력하기
//		0 ~ 12	: 어린이입니다
//		13 ~ 19	: 청소년입니다
//		20 이상	: 성인입니다
//		
//		나이입력 : 16(숫자 쓰기)
//		현재 나이는 16살이고 청소년입니다.
 		 
 		//1) 입력 메세지 출력
 		//2) 나이변수 입력메소드 nextInt()
 		//3) 조건문(if~else if~else)
 		//	3-1) if(나이ㅣ <= 12)
 		//	3-2)	어린이입니다 출력
 		//	3-3) }  else if (나이 <= 19)
 		//	3-4)	청소년입니다 출력
 		//	3-5) }	else {
 		//	3-6)	성인입니다 출력
 		//		 }
 
//		 while(true) {
//	 		 System.out.println("나이를 입력하세요 : ");
//	 		 int age = sc.nextInt();
//	 		 if(age <= 0) {
//	 			 System.out.println("다시 입력하세요");
//	 			 continue;
//	 		 }
//	 		 if(age <= 12) {
//	 			 System.out.println("어린이입니다");
//	 		 }else if(age >0 && age <= 19) {
//	 			 System.out.println("청소년입니다");
//	 		 }else {
//	 			 System.out.println("성인입니다");
// 		 }
// 		 
//	 }	 
 		 
 		 
 		 
 		 
 		 
//	
//	4. 세 개의 정수를 입력받아 가장 작은 숫자부터 내림차순으로 정렬하여 출력하기
//		단, 세 개의 정수는 모두 다른 숫자이어야한다 (중복값 사용 X)
//	
//		숫자 3개 입력 : 5 1 9
//		정렬된 숫자 : 9 5 1 
		 				
//		System.out.println("정수 3개 입력 : ");
//		int number1 = sc.nextInt();
//		int number2 = sc.nextInt();
//		int number3 = sc.nextInt();
//		
//		//1) 중복값 숫자일 경우 중복된 숫자는 안됩니다 출력
//		// 중복된 숫자가 출력되지 않아야하므로 모든 경우의 수를 if{}안에 작성
//		if ( number1 == number2 || number2 == number3 || number1 == number3) {
//			System.out.println("중복된 숫자는 안됩니다.");
//		}else {
//			int first = 0, second = 0, third = 0;
//		
//		//2) 모든 경우를 비교하여 내림차순으로 정렬
//		//2-1) number1이 가장 큰 수일 때
//		if (number1 > number2 && number1 > number3) {  //5 2 3
//			first = number1;
//		//2-2) number2가 가장 큰 수 일 때
//			if(number2 > number3) {
//				second = number2;
//				third = number3;
//			}esle {
//				second = number3;
//				third = number2;
//			}
//		//2-2) number2가 가장 큰 수 일 때
//		}else if(number2 > number1 && number2 > number3) {
//			first = number2;
//			if(number1 > number3) {
//				second = number1;
//				third = number3;
//			}else {
//				second = number3;
//				third = number1;
//			}
//		//2-3) number3가 가장 큰 수 일 때
//		}else {
//			first = number3;
//			if(number1 > number2) {
//				second = number1;
//				third = number3;
//			}else {
//				second = number3;
//				third = number1;
//			}
//		}// if~else if~else 문 중 else문의 중괄호 영역 끝
//
//		System.out.println("정렬된 숫자 : " + first + "," + second + ", " + third);
//		
//	} //첫번째 else문의 중괄호 영역 끝
//		 
//	sc.nextLine(); //버퍼 지우기
//		 오류 계속 나니까 강사님이 올려주신거 보고 대조해보기
		 
		 
		 
		 
		 
//	5. 사용자가 문자열을 입력받고 "X"만 입력했을 경우에만 종료 메시지 
//		출력하고 그 외에는 입력한 문자열을 출력하기(While문)
//		X는 대소문자 상관없이 편한 문자 넣어서 작성
	
		//1) 반복문(while문) => true
		//2) { 입력메시지 출력)
		//3)	변수 입력메소드 nextLine
		//4)	조건문{if~else)
		//		4-1) if문	.equals() 비교
		//		4-2)	종료
		//		4-3)	break;
		//		4-4) else문
		//		4-5)	입력된 문자열 출력
		//		4-6)	continue;
//		String str1 = 
		while(true) {
		System.out.println("문자열을 입력하세요(X입력시 종료) : ");
		String str1 = sc.nextLine();
//		if(str1.equals("X") || str.equals("x")) {
		if(str1.charAt(0) == 'x' && str1.length() == 1) {
			//String타입.length(): 문자열 길이 확인하는 메소드
			System.out.println("프로그램을 종료합니다");
			break;
		}else {
			System.out.println("입력한 문자열 : " + str1);
		}
	}
}
}
==============================================================================================
Gugudan01.java

package twoForTest;

import java.util.Scanner;

public class Gugudan01 {
	public static void main(String[] args) {
	
//		로직구성
//		바깥for문 초기식, 조건식, 증감식
//		안쪽for문 초기식, 조건식, 증감식
//		각 중괄호 영역 안에서의 출력문이 어떻게 될지 작성
//		
	/*	
	1) 단별로 세로로 출력하기
		2단
		2 x 1 = 2
		2 x 2 = 4
		...
		2 x 9 = 18

		3단
		3 x 1 = 3
		3 x 2 = 6
		...
		3 x 9 = 27
		...

		9단
		9 x 1 = 9
		...
		9 x 9 = 81
		*/
		
		Scanner sc = new Scanner(System.in);
//		1) 입력메소드 import, 바깥 for문 시작
//		System.out.println("구구단 숫자 : ");
//		int i = sc.nextInt();
//		int b = sc.nextInt();
//		System.out.println();
//		int b1 = 0;
//		for(int i = 0; i <= 10 && 1 <= i  ; i++) {
//			System.out.print(i);
//			for(int b = 0; b <= 9; b++);{
//				System.out.println(b);
//				System.out.println(i * b);
//				System.out.print("i : " + i + ", b :" + b + " ");
//				System.out.printf(a + " x " + b + " = " );
//			}
//			System.out.println();			
//		}
//		
		/*
		for(int i = 1; i <= 3;i++) { //바깥 for문(2행)
//			System.out.println(); //바깥for문 공간
			for(int j = 1; j <= i; j++) { //안쪽 for문(3열)
				System.out.print("i = " + i + ", j = " + j + " ");
//				헷갈릴때는 항상 ↑ 이걸 출력해서 확인해보기
//				System.out.print("*");
			}
			System.out.println(); //바깥 for문공간 
		}*/
//		System.out.println("숫자를 입력하세요");
//		int first = sc.nextInt();
//		int second = sc.nextInt();
//		for(int i = 1; i < first + 1; i++) {
//			for(int j = 1; j <= second; j++) {
//				System.out.print(i + "단 : \n");
//				System.out.println(i + " x " + j + " = "  + (i * j) + "     ");
//			}
//				System.out.println(" ");
//		}
//	
		
	       //이중for문
	       for(int dan = 2; dan <= 9; dan++) { //바깥for문 dan => 2 ~ 9
	    	   //dan의 범위를 2~9사이로 설정하고 1씩 증가시키기
	          System.out.println(dan + "단");
	          //안쪽for문 곱해질 변수 i => 1 ~ 9
	          for(int i = 1; i <= 9; i++) {
	             System.out.println(dan + " x " + i + " = " + (dan * i));
	          }
	          System.out.println();
	       }
	    }
	}

===============================================================================================

Gugudan02. java
package twoForTest;

import java.util.Scanner;

public class Gugudan02 {
	public static void main(String[] args) {
		/*
		 * 4) while문만 이용 구구단 출력(단별로 가로로 출력하기)
		 */
//		Scanner sc = new Scanner(System.in);
//		System.out.println("숫자를 입력하세요");
//		int first = sc.nextInt();
//		int second = sc.nextInt();
//		while(true) {
//		for(int i = 1; i < first + 1; i++) {
//			for(int j = 1; j <= second; j++) {
//				System.out.print(i + "단 : \n");
//				System.out.println(i + " x " + j + " = "  + (i * j) + "     ");
//				}
//				System.out.println(" ");
//			}
//		}	
			//바깥 for문 => 곱해지는 수
			System.out.println("=========================");
			for(int i = 1; i <= 9; i++) { //바깥for문 i => 1 ~ 9
				for(int dan = 2; dan <= 9; dan++) {
				System.out.println(dan + "단");
	           //안쪽for문 dan => 2 ~ 9, 바깥문이 1번 돌 동안 안쪽문은 전부 다 돌아감
//	              System.out.println(dan + " x " + i + " = " + (dan * i));
//	              System.out.println(i + ", " + dan);
//	              System.out.print(dan + ", " + i);
//	              System.out.println(dan + ", " + i + " = " + (dan * i) + "\t");
	              System.out.printf("%d x %d = %2d\t", dan, i, dan * 1); //\t로 탭키를 적용해서 깔끔하게 보이게 만드는거
	              //2~9단을 출력하기 위해서 dan이 뒤가 아닌 앞으로 나와야함
//	              System.out.print(dan + ", " + i);
	           }
	        }
//	       System.out.println();
	}
}

===========================================================================================
TwoForTest01. java
package twoForTest;
// 1번 : 이중for문 기본
public class TwoForTest01 {
	public static void main(String[] args) {
		
//		이중for문의 초기식에는 보통 i와 j를 많이 사용함
		
		for(int i = 0; i < 3; i++) { //바깥 for문 //행
			System.out.println(i);
			//바깥 부문이 한번 반복되는동안 안쪽 부문이 false가 나오기 전까지 계속 반복한다
//			for(초기식; 조건식; 증감식) { 
			for(int j = 0; j < 3; j++) { //안쪽 for문 //열
				//i가 한번 반복할때 j는 n(여기서는 0<3 = 3만큼 반복한다)
			System.out.println(j);
//			System.out.println("i : " + i + ", j : " + j);
//			System.out.println(i + ", " + j);
			//안쪽 부문이 false가 됐을 떄 중괄호 안으로 가서 증감식으로 이동
			/*
			 * i : 1, j : 1
				i : 1, j : 2
				i : 2, j : 1
				i : 2, j : 2  			
			 */
		}
//			System.out.println(); 여기에 작성시 줄바꿈을 한줄 띄워줌ㄴ
				System.out.println(); //바깥for문 위치
	}

//		1. 바깥 for문 시작
//		1-1) 초기식 i를 1로 초기화
//			조건식 i < 3 조건을 검사 => 1 < 3 true이면 바깥for문의 중괄호 영역 안으로 들어간다
//		2. 안쪽 for문 시작
//		2-1) 초기식 j를 1로 초기화
//			조건식 j < 3 조건을 검사 => 1 < 3 true이면 안쪽 for문 중괄호 영역 안으로 들어간다
//		2-2) 출력메소드 System.out.println("i : " + i + ", j : " + j);
//			출력결과	=> i : 1, j : 1
//		3.	안쪽 for 계속 진행
//		3-1) 증감식으로 이동 j가 1증가(j++) 현재 j의 값 : 2
//		3-2) 조건식	j < 3 조건 검사 => 2 < 3 true이면 안쪽 for문 중괄호 영역 안으로 들어간다
//		3-3) 출력메소드 	System.out.println(" i : " + i + ", j : " + j)
//			출력결과 => i : 1, j : 2
//		4. 안쪽 for 계속 진행
//		4-1) 증감식으로 이동 j가 1증가(j++) 현재 j의 값 : 3
//		4-2) 조건식 j < 3 조건검사 => 3 < 3 false이면 안쪽 for문 중괄호 영역 밖으로 이동한다.
//		4-3) 안쪽 for문 중괄호 밖, 바깥쪽 for문 중괄호 안의 내용이 있다면 해당 내용 실행한다
//		5. 바깥쪽 for문 계속 진행(증감식으로 이동하겠다)
//		5-1) 증감식 이동	i가 1증가(i++)	현재 i 값 : 2
//		5-2) 조건식	i < 3 조건 검사 => 2 < 3 true 바깥쪽 for문 중괄호 영역안으로 들어간다
//		6. 안쪽 for문 시작
//		2~5번까지 계속 반복
//		+) 바깥 for문의 증감식으로 이동 후 조건식을 확인 시 false가 나오면 바깥 for문의 중괄호 영역 밖으로 이동한다
		
		 System.out.println();

	      for (int i = 0; i < 4; i++) { // 바깥for문 //행]
//	         System.out.print(i);
	         for (int j = 1; j < 5; j++) { // 안쪽 for문 //열
//	            System.out.print("i : " + i + ", j : " + j);
	            System.out.print(i + j);
	         }
	         System.out.println(); // 바깥for문 위치
	      }				

	}
}
==========================================================================================
TwoForTest
package twoForTest;

import java.util.Scanner;
/*
//2번 : 2행 3열 출력하기
///
 */
public class TwoForTest02 {
	public static void main(String[] args) {
		/*
		for(int i = 1; i <= 3;i++) { //바깥 for문(2행)
//			System.out.println(); //바깥for문 공간
			for(int j = 1; j <= i; j++) { //안쪽 for문(3열)
				/*
			    * 
		      	**
				***
				 
				System.out.print("i = " + i + ", j = " + j + " ");
//				헷갈릴때는 항상 ↑ 이걸 출력해서 확인해보기
//				System.out.print("*");
			}
			System.out.println(); //바깥 for문공간 
		}
	*/
		//사용자로부터 행과 열을 입력받아 출력하기
		Scanner sc = new Scanner(System.in);
		System.out.println("행과 열을 입력하세요: ");
		int row = sc.nextInt();
		int col = sc.nextInt();
		for(int i =1; i <= row; i++) {
			for(int j = 1; j <= col; j++) {
//				System.out.println("i:" + i + ", j:" + j + " ");
				System.out.print("* ");
			}
			System.out.println();
		}
		
		
	}
}
=============================================================================================	
ArrayTest01

package Array;
// 3번 : 배열 선언 및 생성
public class ArrayTest01 {
	public static void main(String[] args) {
		
		//1) 어떤 값이 들어갈 지 모르나 몇 칸 만들지는 알 때
		//정수형 배열변수 number1 선언하고 크기 5칸인 배열 생성
		int[] number1 = new int[5];
		
		//2) 어떤 값이 들어갈 지 알 떄
		//문자열 배열변수 aplha 선언하고 a, b, c 값으로 배열생성
		String[] alpha = {"a" + "b" + "C"}; //배열을 의미한다
		
		//3) 어떤 값이 들어갈 지 모르고 몇 칸 만들지도 모를 때
		//실수형 배열변수 numbrer2 선언
		double[] number2 = null;
		
		//4) 배열변수 선언 후 배열 생성과 초기화
		//정수형 배열 number3 선언
		//1, 2, 3, 4 값으로 초기화
		int[] number3;
		number3 = new int[] {1, 2, 3, 4};
		
		System.out.println(number1);
		System.out.println(alpha);
		System.out.println(number2);
		System.out.println(number3);
		
//		[I@1f32e575
//		 [Ljava.lang.String;@279f2327
//		 null
//		 [I@2ff4acd0	
	}
}
================================================================================================
ArrayTest02
package Array;
// 4번 : 배열 index
public class ArrayTest02 {
	public static void main(String[] args) {
		
		//어떤 값을 넣을 지 알 때
		int[] ar1 = {1, 2, 3, 4, 5};
		System.out.println(ar1);	//[I@1f32e575 < ar1의 주소값
		// ar1 => stack 메모리에 있는 참조변수(heap 메모리에 저장된 배열의 시작주소 => 참조값)
		// stack에 메모리 생성, 대입연산자를 통해 heap에 메모리 저장
		// Heap 메모리에 있는 주소값을 불러옴(참조하고 있다) / 
		// ar1 : 참조변수, heap메모리의 시작 주소값 : 참조값
		
		System.out.println(ar1[0]); //1, heap메모리를 참조, 0번째에 있던 1을 가져옴
		System.out.println(ar1[1]);
		System.out.println(ar1[2]);
		System.out.println(ar1[3]);
		System.out.println(ar1[4]);
//		System.out.println(ar1[5]); // 길이가 5인데 0~4만 참조가 가능하므로 [5]를 참조하려하면 오류발생!
		
		// 몇 칸을 만들지 알 때
		int[] ar2 = new int[3];
		System.out.println(ar2); //[I@279f2327  heap 메모리에 저장된 시작주소값(참조값)을 담고있다.
		System.out.println(ar2[0]); // 0
		System.out.println(ar2[1]); // 0
		System.out.println(ar2[2]); // 0
//		System.out.println(ar2[3]); // 인덱스 범위 0,1,2를 벗어나므로 오류 발생
		
		int num;
//		System.out.println(num); //초기화가 안됐음
		
		
		int[] ar3 = null;
		System.out.println(ar3); //null  해당 주소값이 어디인지 특정이 안되서 못가져오므로
//		System.out.println(ar3[0]); //in thread "main" java.lang.NullPointerException
		//일반적으로 만드는 메모리는 스택메모리에 저장되서 꺼내올 수 있는 상태이나, null은 해당 저장공간 자체가 없기에 불러올 수 없다, 초기화가 안된 상태랑 똑같음
		//실제 메모리에는 들어가지 않고 그냥 만들거다~ 라고만 정의한 상태임
		
		
		System.out.println(ar1);
		ar1 = new int[] {1, 2, 3};
		System.out.println(ar1);	
	}
}

===============================================================================================

ArrayTest03

package Array;
//5번 : 배열 사용(저장공간과 값)
public class ArrayTest03 {
	public static void main(String[] args) {
		int[] arData = {5, 2, 6, 4};
		System.out.println(arData); //배열의 시작주소값(참조값)
		System.out.println("배열의 길이 : " + arData.length);
		
		System.out.println(arData[0]);
		System.out.println(arData[1]);
		System.out.println(arData[2]);
		System.out.println(arData[3]);
		
		for(int i =0; i < arData.length; i++) {
			System.out.println(arData[i]);
		}
//						2			4
		arData[0] = arData[1] + arData[3]; //저장공간, 값, 값
		System.out.println(arData[0]);
		
		int[] arData2 = new int[10];
		//값 대입 반복문
		for(int i = 0; i < arData2.length; i++) {
			arData2[i] = i + 1;
			System.out.println(i);
		}
		//출력 반복문
		for(int i = 0; i < arData2.length; i++) {
			System.out.print(arData[i] + " ");
		}
	}
}

==============================================================================================

배열 복습문제

제출할때 homework_강승훈.zip 파일로 압축파일 제출하기

- 배열에 값을 담아주는 반복문, 출력하는 반복문 따로 출력

// 패키지 : homework08
// 클래스 : ArrayTask01
1. 100 ~ 1 까지의 값을 배열에 넣고 출력

// 클래스 : ArrayTask02
2. 1 ~ 10  까지의 값을 배열에 넣고 총 합을 출력

// 클래스 : ArrayTask03
3. 3명의 수학점수를 사용자에게 입력받아 배열에 저장하고 평균 점수를 출력

// 클래스 : ArrayTask04
4. 0 1 2 3 0 1 2 3 배열에 담고 출력

// 클래스 : ArrayTask05
5. A ~ F 까지를 배열에 값을 넣고 출력

// 클래스 : ArrayTask06
6. A ~ F 까지 중에서 C만 제외하고 배열에 담아 출력

// 클래스 : ArrayTask07
7. aBcDeFgHiJkLmNoPqRsTuVwXyZ 배열에 담고 출력(char만 사용, 선언없이)

// 클래스 : ArrayTask08
8. 5개의 정수를 입력받은 뒤 그 값을 배열에 담고 최대값과 최소값 출력

9. 3단씩 출력하기 Gugudan03
//?
for(){
   //단제목 출력
   for(){
   }

   //곱셈계산결과
   for(){
      for(){
      }
   }
}

10. while문만 이용 구구단 출력(단별로 가로로 출력하기) Gugudan04
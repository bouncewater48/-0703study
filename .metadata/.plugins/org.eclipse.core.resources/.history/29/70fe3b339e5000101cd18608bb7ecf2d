package Review;

public class MethodTask02 {
		
	// 1. 정수1개를 받아서 짝수입니다, 홀수입니다를 반환하는 메소드
	// 메소드명 : checkNum	
		
	//1) 기능
	//2) 리턴타입 => void
	//3) 메소드명 => checkNum
	//4) 매개변수 => 정수형 변수1개
	//5) 실행할문장 => 삼항연산자
	//6) return => return 매개변수 % 2 == 0 ? "짝수입니다" : "홀수입니다"
	//7) 리턴타입 변경 => String
	String checkNum(int number) {
		return number % 2 == 0 ? "짝수입니다" : "홀수입니다";

	}
	
	//2. 10칸짜리 정수 배열을 받아 총합을 계산하여 반환하는 메소드
	//메소드명 : getSum
	//1) 리턴타입 => void
	//2) 메소드명 => getSum
	//3) 매개변수 => int[] 매개변수명
	//4) 실행할문장(기능 구현) =>
	//		총합구할변수 선언
	//		for-each문(자료형 변수명 : 배열명){
	//			총합구할변수 += 변수명;
	//		}
	//5) return 총합구할변수
	//6) 리턴타입 => int
	
	int getSum(int[] numbers) {
		int total = 0;
		for(int num : numbers) {
			total += num;
		}
		return total;
	}
		
	//3. 문자열을 매개변수로 받아 거꾸로 뒤집어 반환하는 메소드
	//메소드명 : reverseStr
	// hello => olleh
	
	//3-1) char[]을 이용한 방식
	//리턴타입 => void
	//메소드명 => reverseStr1
	//매개변수 => String 1개
	//실행할 문장 => 
	//	조건식(if문) 매개변수 == null
	//			{ return; }
	//	int 변수1 = 매개변수명.length();
	//	문자형 배열 변수2 = new char[매개변수명.length()];
	//	반복문(for문) int i = 0; i < 길이; i++;
	//	{	변수1[i] = 매개변수.charAt(변수1 - 1 - i); } 
	//return => 문자열변수
	
	//매개변수 o, 리턴값 x 메소드 정의
//	char[] reverseStr1(String str) {
	String reverseStr1(String str) {
//		if(str == null) {
//			return null; //메소드 즉시 종료
//		}
		int len = str.length();
		char[] reverse = new char[len];//reverse라는 문자열 생성
		String result = "";	
		for(int i = 0; i < len; i++) {
			reverse[i] = str.charAt(len - 1 - i);
			//문자열을 반대로 (hello는 olleh로) 반환하겠다
//			System.out.println(reverse[i]);
//			result += reverse[i];
		}
//		return reverse ;
		return new String(reverse);
	}
	
	
	//3-2) 뒤어서부터 문자를 하나씩 더해서 새로운 문자열 만드는 방식
	//	리턴타입 =>  void
	//	메소드명 => reverseStr2
	//	매개변수 => String str
	//	실행할 문장 =>
	//	 조건문 if(str == null){ return null; }
	//	 문자열 변수 선언
	//	 반복문(for문) int i = str.length() -1; i >= 0; i--
	//		{ 변수 += str.charAt(i); }
	//	return => 변수
	// 리턴타입 변경 => String
	
	String reverseStr2(String str) {
		if(str == null) {
			return null;
		}
		String result ="";
		for(int i = str.length() -1; i >= 0; i--) {
			result += str.charAt(i);
		}
		return result;
	}
	
	
	//3-3) char[] 새로 만들어서 앞뒤 바꿔서 복사하는 방식
	// 리턴타입 => void
	// 메소드명 => reverseStr3
	// 매개변수 => String str
	// 실행할 문장 (기능구현)
	//		조건문if str ==null {return null;}
	//		정수형 변수1 = str.length();
	//		문자형배열 변수2 = new char[변수1];
	//		반복문for문 int i = 0; i < 변수1; i++
	//		{	변수2 = str.charAt(변수1 - 1 - i); }
	//		String 변수3 = ""
	//		for-each문 사용
	//		for(char 변수 : 변수2){
	//			변수3 += 변수;
	//		}
	// 리턴타입 변수3; String타입으로 변경
	
	String reverseStr3(String str) {
		if(str == null) {
			return null;
		}
		
		int len = str.length();
		char[] reverse  = new char[len];
		
		for(int i = 0; i < len; i++) {
			reverse[i] = str.charAt(len - 1 - i);
		}
		String result= "";
		for(char c : reverse) {
			result += c;
		}
		return result;
	}
	
	
	//4) 메모리를 효율적으로 사용하는 메소드를 이용하는 방식
	//아직 안 배운 내용이므로 이건 수업중에 안쓸것이나, 코딩테스트나 PCCE 시험을 볼거면 알아두면 좋음!
	//String까지 다 배우고나서 사용예정
	//아래 2줄만 작성하면 끝남
	
	
	String reverseStr4(String str) { //String타입 반환
		return new StringBuilder(str).reverse(str).reverse().toString();
	}
	
	
	public static void main(String[] args) {
		MethodTask02 mt =  new MethodTask02();
		System.out.println("=======1번=======");
		//매개변수 o, 리턴값 o => syso(객체명.메소드명(인수));
		System.out.println(mt.checkNum(10));
		System.out.println(mt.checkNum(-7));
		
		System.out.println("=======2번=======");
		//매개변수 o, 리턴값 o => syso(객체명.메소드명(인수));
		System.out.println(mt.getSum(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}));
		int[] numbers = {10, 20, 10, 20, 10, 20, 10, 20, 10, 20};
		System.out.println(mt.getSum(numbers));

		System.out.println("=======3-1번=======");
		//매개변수 o, 리턴값 x 메소드 정의
//		mt.reverseStr1(null); //null은 출력되면 안됨
		System.out.println(mt.reverseStr1("철수")); 
		//한글이나 영어나 다 거꾸로 반전되서 출력
		
		System.out.println("=======3-2번=======");
		
		
		System.out.println("=======3-3번=======");
		
		
		System.out.println("=======3-4번=======");


		System.out.println("=======4번=======");
//		int[] ar = null; //false
		System.out.println(mt.contains(null, 0)); //위에 적은거랑 같은 뜻임
		int[] ar = {1, 2, 3, 10};
		System.out.println(mt.contains(ar, 10)); // ar안에 있는걸 적으면 true
	
	
		System.out.println("=======7번=======");
		System.out.println(mt.loginTry("admin", "12345"));
		System.out.println(mt.loginTry("admin", "1235"));
		System.out.println(mt.loginTry("admin", "1235"));
		System.out.println(mt.loginTry("admin", "1235"));
		System.out.println(mt.loginTry("admin", "1235"));
	
	
	
	
	
	
	}
	
	
	//4. 정수형 배열과 찾을 값을 매개변수로 받아서 배열에 존재하면 true를 반환하는 메소드 만들기
	//메소드명 : contains
	//배열 요소 중에 10이라는 값을 반드시 넣고 10을 매개변수로 전달
//		syso(메소드명(배열명, 10)) => true
//		return타입 : boolean 타입
	
	// 리턴타입 => void -> boolean타입
	// 메소드명 => contains
	// 매개변수 => 정수형배열 1개, 정수형변수 1개
	// 구현부 {
	//		if(매개변수1(정수형배열) == null) {
	//		  return false; }  null이 들어가면 출력되면 안되므로
	//		for(정수형 변수 : 배열명){
	//		  조건문(if문) 변수 == 정수형변수 { 배열에 찾을값이 있을떄 true
	//				return true;
	//			}
	//
	//		}
	//		return false; 배열에 찾을값이 없을때 false
	// }
	
	boolean contains(int[] arr, int num) {
		if(arr == null) {
			return false;
		} // if문을 삭제시키면 for문으로 바로 가지만, arr이 정의되지 않았기에 오류가 발생
		for(int i : arr) {
			if(i == num) {
				return true;
			}
		}
		return false;
	}
	
	
	//7. 아이디와 비밀번호를 매개변수로 받아 검증, 시도횟수 3회 넘기면 잠금 반환
	//메소드명 : loginTry	
	// 메소드에는 모든 기능이 들어가면 안되고 무조건 기능 1가지만!
	// 메소드 안에서 sc.close 메소드를 사용하면 main메소드에서 더 입력받을게 있어도 
	// 강제로 끝나기(종료)에, 나중에 입력받으려 할때 오류터짐
	
	//입력이 따로 없고 매개변수로만 전달될때를 가정한것
	// 리턴타입 => void => String
	// 메소드명 => loginTry
	// 매개변수 => 문자열 2개
	// 구현부 =>
	//		고정값 id, pw 선언(상수)
	//		횟수 확인할 변수1 선언
	//		if문 변수1 >= 3 // 2번 틀렸을때도 확인해야해서 if if문 사용
	//			return 계정잠금 / 시작하자마자 계정잠금 확인
	//		if문 상수id.equals(매개변수id) && 상수pw.equals(매개변수pw)
	//			변수1 초기화 / 로그인 성공이니 횟수 초기화
	//			return 로그인 성공
	//		else {
	//			변수1++
	//			if(변수1 >= 3){
	//			return 계정잠금} /3 이상일때 계정잠금 확인
	//		return 로그인실패
	//		}
	//}}
	
	//메소드 밖에서 클래스 안에 변수 선언
	int tryCount = 0; //int tryCount를 메소드 밖으로 끌어내면 
	
	String loginTry(String inputId, String inputPw) {
		final String ID = "admin";
		final String PW = "1234";
		
//		int tryCount = 0; // 시도할 횟수
		if(tryCount >= 3) {
			return "계정잠금";
		}
		if(ID.equals(inputId) && PW.equals(inputPw)) {
			tryCount =0;
			return "로그인 성공";
		}else {
			tryCount++;
			if(tryCount >=3) {
				return "계정잠금";
			}
			return "로그인 실패";
		}
	}
	
	
	
	
	//5. 단수를 매개변수로 받아 해당 단의 구구단을(1 ~ 19)를 출력하는 메소드
	//메소드명 : printGugudan
	// 3 x 1 = 3
	// ...
	// 3 x 19 =_ 까지 출력, println으로 출력해도 상관없음
	
	//6. 두 개의 문자열을 입력받아서 두 문자열의 길이가 같으면 같음, 다르면 다름 반환하는 메소드
	//메소드명 : compareLegnth
	

		
}

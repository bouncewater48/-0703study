-- 실습

-- 1. 
-- 학생 정보 테이블(정규화되지 않은 일반 테이블)
/*
 * 학번(Stu_id) 이름(stu_name) 전공(stu_major) 과목코드(stu_course_code) 과목명(stu_course_name)
 * 001         홍길동         컴공            cs101               데이터베이스
 * 001         홍길동         컴공            cs202               알고리즘
 * 002         김철수         경영학           bus202              경영이론
 * 
 * */

-- 1. 요구사항분석
/*
	학생, 과목 2가지를 관리해야한다
	- 학번, 이름, 전공, 과목코드, 과목명
	학생 한명은 여러 과목을 수강할 수 있다
	한 과목에 여러 학생을 동시에 포함할 수 있다
*/

-- 2. 개념적설계
/*
	학생 엔티티 /  과목 엔티티 / 수강 엔티티 /  주소 엔티티 
	학번			과목코드		학번			주소			
	이름			과목명		과목코드		주소명		
	전공										
	과목코드										
	과목명											
	주소	
	
	※ 학생 1:N 과목
	※ 과목 N:1 학생
	※ 수강은 학생과 과목 사이의 N:M 관계를 해소시키는 중간엔티티
	
	※ 학생은 학번,이름이 필요하다 / 전공,과목코드,과목명,주소는 필수는 아니다 
	※ 과목은 과목번호만 있으면 된다
	※ 주소에는 주소와 주소명이 필요하다
	※ 수강에는 학생의 학번과 과목의 과목코드가 필요하다(학생, 과목)
	
	
	
*/

-- 3. 논리적설계(정규화)
/*				중간 엔티티(테이블) : N:M 관계일때 1:N관계로 풀어주는 역할
	학생 엔티티 / 수강 엔티티 /	과목 엔티티 /    주소 엔티티 /
	학번PK		학번FK(PK)	전공		주소번호PK		
	이름			과목코드FK	(PK)과목코드PK		주소
	과목명		=> PK						
	과목코드					과목명
													
	주소번호FK
	주소
	학생			과목					수강
	1 짱구1:M	 M:1 10 DBMS			1		10
	2 짱아		20 JAVA				2		10
	3 철수		30 C				3		10
									1		20
	
	상위 테이블 : 학생
	하위 테이블 : 수강테이블, 과목테이블, 주소테이블
	
	FK, PK
*/


-- 정규화 진행시 테이블 만들고 값 5개씩 넣기
-- 1차 정규화
CREATE TABLE TBL_STU(
	STU_ID NUMBER,
	STU_NAME VARCHAR2(100),
	STU_MAJOR VARCHAR2(100),
	STU_COURSE_CODE VARCHAR2(100),
	STU_COURSE_NAME VARCHAR2(100)
);

SELECT * FROM TBL_STU;

	ALTER TABLE TBL_STU
	ADD CONSTRAINT PK_STU PRIMARY KEY(STU_ID);
--학번(Stu_id) 이름(stu_name) 전공(stu_major) 과목코드(stu_course_code) 과목명(stu_course_name)
	INSERT INTO TBL_STU
--	VALUES(01, '아무개', '컴퓨터 공학', 'as101', '데이터베이스');
--	VALUES(02, '홍길동', '컴퓨터 공학', 'as101', '데이터베이스');
--	VALUES(03, '김철수', '인문학', 'as101', '데이터베이스');
--	VALUES(04, '짱구' , '컴퓨터 공학', 'as101', '데이터베이스');
--	VALUES(05, '신형만', '컴퓨터 공학', 'as101', '데이터베이스');
	
CREATE TABLE TBL_SUBJECT(
	SUB_COURSE_CODE VARCHAR2(100),
	SUB_NAME VARCHAR2(100),
);

CREATE TABLE TBL_CRS(
	CRS_STU_ID NUMBER,
	CRS_SUB_CODE VARCHAR2(100),
);

CREATE TABLE TBL_ADD(
	ADDRESS NUMBER,
	ADDRESS_ADDR VARCHAR2(100),
);


	STU_ADDRESS NUMBER,
	STU_ADDRESS2 VARCHAR2(100)

	CONSTRAINT PK_STU PRIMARY KEY(STU_ID),
	CONSTRAINT FK_STU FOREIGN KEY(STU_ADDRESS) REFERENCES TBL_ADD(ADDRESS)
	
	CONSTRAINT PK_SUB_MAJOR PRIMARY KEY(SUB_MAJOR, SUB_CODE, SUB_NAME)
	
	CONSTRAINT PK_TBL_CRS PRIMARY KEY(CRS_STU_ID, CRS_SUB_CODE),
	CONSTRAINT FK_CRS_STU_ID FOREIGN KEY(CRS_STU_ID) REFERENCES TBL_STU(STU_ID),
	CONSTRAINT FK_CRS_SUB_CODE FOREIGN KEY(CRS_SUB_CODE) REFERENCES TBL_SUB(SUB_CODE)
	
	CONSTRAINT PK_ADDRESS PRIMARY KEY(ADDRESS)
	
	
-- 4. 물리적설계


-- 5. 구현
















